# -*- coding: utf-8 -*-

# Created by: PyQt5 UI code generator 5.15.2 and modified by later code editing
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Developed by: Ligdamis A. Gutiérrez E. PhD.
# Shannon Entropy Work by Pablo Rey D.
# Entropy estimator for Characterization of Volcanic Seismic Signals

# Andalusian Institute of Geophysics,
# Signal Theory, Telematics and Communications Department,
# Department of Theoretical Physics and the Cosmos,
# Science Faculty,
# Granada University, (Ugr), Spain, 2023

# This software is the product of the research by the Spanish projects:

# a)    PID2022-143083NB-I00, “LEARNING”, funded by MCIN/AEI /10.13039/501100011033
# b)    JMI and LG were partially funded by the Spanish project PROOF-FOREVER (EUR2022.134044)
# c)    PRD was funded by the Ministerio de Ciencia e Innovación del Gobierno de España (MCIN), Agencia Estatal de Investigación (AEI), Fondo Social Europeo (FSE), and Programa Estatal de Promoción del Talento y su Empleabilidad en I+D+I Ayudas para contratos predoctorales para la formación de doctores 2020 (PRE2020-092719).
# d)    Spanish Project PID2022-143083NB-100 founded by MCIN/AEI/10.13039/501100011033 and by FEDER (EU) “Una manera de hacer Europa”.
# e)    PLEC2022-009271“"DigiVolCa”", funded by MCIN/AEI, funded by MCIN/AEI/10.13039/501100011033 and by EU «NextGenerationEU/PRTR», 10.13039/501100011033.

''' WARNING: Do not modify or edit the code without permission of the author.
    In case of using this software, indicate and refer to the author and the institution he represents.
    The University of Granada, Ugr '''

# Program: readSignals.py -> Performs the read, filtering and plot the seismic signals

# Load libraries to use

# When using another class to import canvas from another file
from class_canvas1 import MatplotlibWidget11_sin
from PyQt5 import QtCore, QtGui, QtWidgets

# To read records through the "obspy" library
import obspy
from obspy.imaging.cm import obspy_sequential
from obspy.signal.tf_misfit import cwt
from obspy import Stream
from obspy import read
from obspy.io.sac import SACTrace
from obspy import read, Trace

# Identify the operating system
import platform
sistema = platform.system()  # Identify the operating system

# For system use, threads and paths (path)
import sys
import os
import subprocess
from pathlib import Path

# Libraries to use tkinter (Graphical interface)
import tkinter
import tkinter as tk
from tkinter.ttk import Combobox, Style
from tkinter import Frame, IntVar, Label, filedialog, Entry, Radiobutton, CURRENT

# In case of using the window as root (changes later)
from tkinter import *
root = tk.Tk()
root.withdraw()

# import matplotlib.cbook as cbook
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# Libraries for the use of PyQt5 - binding of the graphical Qt library
from PyQt5.QtWidgets import QApplication, QWidget, QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets, uic


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1152, 717)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Images/Ugr.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.widget = MatplotlibWidget11_sin(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 180, 1131, 242))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.widget.setAutoFillBackground(True)
        self.widget.setObjectName("widget")

        # Set frame groups

        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(209, 140, 810, 31))
        self.frame.setAutoFillBackground(True)
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(10, 10, 1131, 121))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.frame_2.setPalette(palette)
        self.frame_2.setAutoFillBackground(True)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(10, 510, 1131, 211))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 254, 219))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 254, 219))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 254, 219))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.frame_3.setPalette(palette)
        self.frame_3.setAutoFillBackground(True)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")

        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setGeometry(QtCore.QRect(10, 427, 1131, 71))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.frame_4.setPalette(palette)
        self.frame_4.setAutoFillBackground(True)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_4.setLineWidth(2)
        self.frame_4.setObjectName("frame_4")

        # Set labels

        self.label = QtWidgets.QLabel(self.frame_3)
        self.label.setGeometry(QtCore.QRect(160, 5, 181, 21))
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setGeometry(QtCore.QRect(170, 25, 701, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.label_2.setPalette(palette)
        self.label_2.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.label_2.setAutoFillBackground(True)
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 140, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(36)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(self.frame_2)
        self.label_4.setGeometry(QtCore.QRect(390, 30, 91, 16))
        self.label_4.setObjectName("label_4")

        self.label_5 = QtWidgets.QLabel(self.frame_2)
        self.label_5.setGeometry(QtCore.QRect(400, 60, 81, 16))
        self.label_5.setObjectName("label_5")

        self.label_6 = QtWidgets.QLabel(self.frame_2)
        self.label_6.setGeometry(QtCore.QRect(390, 90, 91, 16))
        self.label_6.setObjectName("label_6")

        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setGeometry(QtCore.QRect(50, 10, 701, 16))
        self.label_7.setObjectName("label_7")

        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(500, 400, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(30)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")

        self.label_9 = QtWidgets.QLabel(self.frame_4)
        self.label_9.setGeometry(QtCore.QRect(10, 10, 1111, 51))
        self.label_9.setObjectName("label_9")

        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setGeometry(QtCore.QRect(1020, 3, 101, 81))
        self.label_10.setText("")
        self.label_10.setPixmap(QtGui.QPixmap("Images/IAG.gif"))
        self.label_10.setScaledContents(True)
        self.label_10.setObjectName("label_10")

        self.label_11 = QtWidgets.QLabel(self.frame_2)
        self.label_11.setGeometry(QtCore.QRect(10, 10, 111, 101))
        self.label_11.setText("")
        self.label_11.setPixmap(QtGui.QPixmap("Images/Ugr.gif"))
        self.label_11.setScaledContents(True)
        self.label_11.setObjectName("label_11")

        self.label_12 = QtWidgets.QLabel(self.widget)
        self.label_12.setGeometry(QtCore.QRect(10, 10, 141, 16))
        self.label_12.setObjectName("label_12")

        self.label_13 = QtWidgets.QLabel(self.frame_2)
        self.label_13.setGeometry(QtCore.QRect(570, 40, 61, 16))
        self.label_13.setObjectName("label_13")

        self.label_14 = QtWidgets.QLabel(self.frame_3)
        self.label_14.setGeometry(QtCore.QRect(890, 10, 61, 16))
        self.label_14.setObjectName("label_14")

        self.label_15 = QtWidgets.QLabel(self.widget)
        self.label_15.setGeometry(QtCore.QRect(590, 10, 121, 16))
        self.label_15.setObjectName("label_15")

        self.label_16 = QtWidgets.QLabel(self.frame_2)
        self.label_16.setGeometry(QtCore.QRect(700, 80, 261, 16))
        self.label_16.setObjectName("label_16")

        self.label_17 = QtWidgets.QLabel(self.frame_3)
        self.label_17.setGeometry(QtCore.QRect(890, 50, 61, 16))
        self.label_17.setObjectName("label_17")

        self.label_18 = QtWidgets.QLabel(self.frame_3)
        self.label_18.setGeometry(QtCore.QRect(160, 60, 181, 21))
        self.label_18.setObjectName("label_18")

        self.label_19 = QtWidgets.QLabel(self.frame_3)
        self.label_19.setGeometry(QtCore.QRect(170, 79, 701, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(200, 197, 151))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(200, 197, 151))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(200, 197, 151))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(200, 197, 151))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.label_19.setPalette(palette)
        self.label_19.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.label_19.setAutoFillBackground(True)
        self.label_19.setText("")
        self.label_19.setObjectName("label_19")

        self.label_20 = QtWidgets.QLabel(self.frame_3)
        self.label_20.setGeometry(QtCore.QRect(160, 115, 181, 21))
        self.label_20.setObjectName("label_20")

        self.label_21 = QtWidgets.QLabel(self.frame_3)
        self.label_21.setGeometry(QtCore.QRect(170, 135, 701, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(202, 255, 251))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.label_21.setPalette(palette)
        self.label_21.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.label_21.setAutoFillBackground(True)
        self.label_21.setText("")
        self.label_21.setObjectName("label_21")

        self.label_22 = QtWidgets.QLabel(self.frame_2)
        self.label_22.setGeometry(QtCore.QRect(400, 10, 151, 16))
        self.label_22.setObjectName("label_22")

        self.label_23 = QtWidgets.QLabel(self.frame_3)
        self.label_23.setGeometry(QtCore.QRect(890, 110, 61, 16))
        self.label_23.setObjectName("label_23")

        self.label_24 = QtWidgets.QLabel(self.frame_3)
        self.label_24.setGeometry(QtCore.QRect(890, 70, 61, 16))
        self.label_24.setObjectName("label_24")

        self.label_25 = QtWidgets.QLabel(self.frame_3)
        self.label_25.setGeometry(QtCore.QRect(890, 170, 61, 16))
        self.label_25.setObjectName("label_25")

        self.label_26 = QtWidgets.QLabel(self.frame_3)
        self.label_26.setGeometry(QtCore.QRect(890, 130, 61, 16))
        self.label_26.setObjectName("label_26")

        self.label_27 = QtWidgets.QLabel(self.frame_2)
        self.label_27.setGeometry(QtCore.QRect(570, 90, 61, 16))
        self.label_27.setObjectName("label_27")

        self.label_28 = QtWidgets.QLabel(self.frame_3)
        self.label_28.setGeometry(QtCore.QRect(329, 163, 771, 31))
        self.label_28.setObjectName("label_28")

        self.label_29 = QtWidgets.QLabel(self.centralwidget)
        self.label_29.setGeometry(QtCore.QRect(1033, 96, 91, 89))
        self.label_29.setText("")
        self.label_29.setPixmap(QtGui.QPixmap("Images/LogoTSTC.gif"))
        self.label_29.setScaledContents(True)
        self.label_29.setObjectName("label_29")

        # Set lines

        self.line = QtWidgets.QFrame(self.frame_2)
        self.line.setGeometry(QtCore.QRect(370, 0, 20, 121))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.line_2 = QtWidgets.QFrame(self.frame_2)
        self.line_2.setGeometry(QtCore.QRect(550, 0, 20, 121))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")

        self.line_3 = QtWidgets.QFrame(self.frame_2)
        self.line_3.setGeometry(QtCore.QRect(130, 0, 20, 121))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")

        self.line_4 = QtWidgets.QFrame(self.frame_2)
        self.line_4.setGeometry(QtCore.QRect(650, 60, 361, 31))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")

        self.line_5 = QtWidgets.QFrame(self.frame_3)
        self.line_5.setGeometry(QtCore.QRect(133, 0, 20, 201))
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")

        self.line_6 = QtWidgets.QFrame(self.frame_3)
        self.line_6.setGeometry(QtCore.QRect(960, 0, 20, 201))
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")

        self.line_7 = QtWidgets.QFrame(self.frame_3)
        self.line_7.setGeometry(QtCore.QRect(970, 90, 161, 31))
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")

        self.line_8 = QtWidgets.QFrame(self.centralwidget)
        self.line_8.setGeometry(QtCore.QRect(10, 410, 461, 20))
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_8.setObjectName("line_8")

        self.line_9 = QtWidgets.QFrame(self.centralwidget)
        self.line_9.setGeometry(QtCore.QRect(10, 498, 1131, 16))
        self.line_9.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_9.setObjectName("line_9")

        self.line_10 = QtWidgets.QFrame(self.frame_3)
        self.line_10.setGeometry(QtCore.QRect(870, 0, 20, 201))
        self.line_10.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_10.setObjectName("line_10")

        self.line_11 = QtWidgets.QFrame(self.frame_2)
        self.line_11.setGeometry(QtCore.QRect(1000, 0, 20, 121))
        self.line_11.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_11.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_11.setObjectName("line_11")

        self.line_12 = QtWidgets.QFrame(self.frame_2)
        self.line_12.setGeometry(QtCore.QRect(1420, 0, 20, 121))
        self.line_12.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_12.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_12.setObjectName("line_12")

        self.line_13 = QtWidgets.QFrame(self.centralwidget)
        self.line_13.setGeometry(QtCore.QRect(670, 410, 471, 20))
        self.line_13.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_13.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_13.setObjectName("line_13")

        self.line_14 = QtWidgets.QFrame(self.frame_2)
        self.line_14.setGeometry(QtCore.QRect(640, 0, 20, 121))
        self.line_14.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_14.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_14.setObjectName("line_14")

        self.line_15 = QtWidgets.QFrame(self.frame_2)
        self.line_15.setGeometry(QtCore.QRect(820, 0, 20, 71))
        self.line_15.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_15.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_15.setObjectName("line_15")

        # Set pushButtons

        self.pushButton = QtWidgets.QPushButton(self.frame_3)
        self.pushButton.setGeometry(QtCore.QRect(20, 25, 111, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.pushButton.setPalette(palette)
        self.pushButton.setAutoFillBackground(True)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("Images/Load.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon5)
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_2.setGeometry(QtCore.QRect(870, 20, 101, 41))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("Images/Clean.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_3.setGeometry(QtCore.QRect(1010, 30, 101, 41))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        self.pushButton_3.setPalette(palette)
        self.pushButton_3.setAutoFillBackground(True)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("Images/Back.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_3.setIcon(icon3)
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_4.setGeometry(QtCore.QRect(1010, 130, 101, 41))
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("Images/Exit.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_4.setIcon(icon4)
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_5.setGeometry(QtCore.QRect(690, 20, 101, 41))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("Images/Plot.gif"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5.setIcon(icon2)
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_6 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_6.setGeometry(QtCore.QRect(20, 80, 111, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.pushButton_6.setPalette(palette)
        self.pushButton_6.setAutoFillBackground(True)
        self.pushButton_6.setIcon(icon5)
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_7 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_7.setGeometry(QtCore.QRect(20, 134, 111, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.pushButton_7.setPalette(palette)
        self.pushButton_7.setAutoFillBackground(True)
        self.pushButton_7.setIcon(icon5)
        self.pushButton_7.setObjectName("pushButton_7")

        # Set groupBox and ComboBox

        self.groupBox_2 = QtWidgets.QGroupBox(self.frame_2)
        self.groupBox_2.setGeometry(QtCore.QRect(150, 10, 211, 101))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(240, 255, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 255, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 255, 247))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.groupBox_2.setPalette(palette)
        self.groupBox_2.setAutoFillBackground(True)
        self.groupBox_2.setObjectName("groupBox_2")

        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_2.setGeometry(QtCore.QRect(10, 20, 191, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")

        # Set lineEdit

        self.lineEdit = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setGeometry(QtCore.QRect(490, 30, 51, 20))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(216, 225, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(221, 255, 210))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.lineEdit.setPalette(palette)
        self.lineEdit.setAutoFillBackground(True)
        self.lineEdit.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)               # <----- To Align text
        self.lineEdit.setObjectName("lineEdit")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_2.setGeometry(QtCore.QRect(490, 60, 51, 20))
        self.lineEdit_2.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.lineEdit_2.setAlignment(QtCore.Qt.AlignCenter)              # <----- To Align text
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_3.setGeometry(QtCore.QRect(490, 90, 51, 20))
        self.lineEdit_3.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)              # <----- To Align text
        self.lineEdit_3.setObjectName("lineEdit_3")

        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(580, 60, 41, 20))
        self.lineEdit_4.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.lineEdit_4.setAlignment(QtCore.Qt.AlignCenter)              # <----- To Align text
        self.lineEdit_4.setObjectName("lineEdit_4")

        self.lineEdit_5 = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit_5.setGeometry(QtCore.QRect(900, 30, 41, 20))
        self.lineEdit_5.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.lineEdit_5.setAlignment(QtCore.Qt.AlignCenter)              # <----- To Align text
        self.lineEdit_5.setObjectName("lineEdit_5")

        self.lineEdit_6 = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit_6.setGeometry(QtCore.QRect(900, 90, 41, 20))
        self.lineEdit_6.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.lineEdit_6.setAlignment(QtCore.Qt.AlignCenter)              # <----- To Align text
        self.lineEdit_6.setObjectName("lineEdit_6")

        self.lineEdit_7 = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit_7.setGeometry(QtCore.QRect(900, 150, 41, 20))
        self.lineEdit_7.setInputMethodHints(QtCore.Qt.ImhPreferNumbers)
        self.lineEdit_7.setAlignment(QtCore.Qt.AlignCenter)              # <----- To Align text
        self.lineEdit_7.setObjectName("lineEdit_7")

        # Set radioButtons

        self.radioButton = QtWidgets.QRadioButton(self.frame_2)
        self.radioButton.setGeometry(QtCore.QRect(710, 100, 101, 17))
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")

        self.radioButton_2 = QtWidgets.QRadioButton(self.frame_2)
        self.radioButton_2.setGeometry(QtCore.QRect(850, 100, 111, 17))
        self.radioButton_2.setObjectName("radioButton_2")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Color and text formatting on Command Buttons
        self.pushButton.setStyleSheet("background-color: honeydew; color: blue")            # Text and Color of the Command Button (load File 1)
        self.pushButton_2.setStyleSheet("background-color: lemonchiffon; color: blue")      # Text and Color of the Command Button (clean input)
        self.pushButton_3.setStyleSheet("background-color: silver; color: blue")            # Text and Color of the Command Button (Back)
        self.pushButton_4.setStyleSheet("background-color: CornflowerBlue; color: white")   # Text and Color of the Command Button (Exit)
        self.pushButton_5.setStyleSheet("background-color: bisque; color: blue")            # Text and Color of the Command Button (graph filters)
        self.pushButton_6.setStyleSheet("background-color: bisque; color: blue")            # Text and Color of the Command Button (load File 2)
        self.pushButton_7.setStyleSheet("background-color: lightcyan; color: blue")        # Text and Color of the Command Button (load File 3)

        """ --- Values for dynamic Text boxes (textEdit and textEdit_2) --- """

        self.textEdit = QtWidgets.QTextEdit(self.widget)
        self.textEdit.setGeometry(QtCore.QRect(0, 30, 581, 200))
        self.textEdit.setObjectName("textEdit")

        self.textEdit_2 = QtWidgets.QTextEdit(self.widget)
        self.textEdit_2.setGeometry(QtCore.QRect(590, 30, 541, 200))
        self.textEdit_2.setObjectName("textEdit_2")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Performs the read, filtering and plot the seismic signals - Granada University (Ugr)"))

        self.groupBox_2.setTitle(_translate("MainWindow", "Filter Type"))                                               # Combobox title
        self.comboBox_2.setCurrentText(_translate("MainWindow", "Please select"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "Please select"))                                       # Index 0 - Please select
        self.comboBox_2.setItemText(1, _translate("MainWindow", "Lowpass Filter"))                                      # Index 1 - Lowpass
        self.comboBox_2.setItemText(2, _translate("MainWindow", "Highpass Filter"))                                     # Index 2 - Highpass
        self.comboBox_2.setItemText(3, _translate("MainWindow", "Bandpass Filter"))                                     # Index 3 - Bandpass
        self.comboBox_2.setItemText(4, _translate("MainWindow", "Bandstop Filter"))                                     # Index 4 - Bandstop

        # Set pushButtons text

        self.pushButton.setText(_translate("MainWindow", "  Load Record 1"))
        self.pushButton_2.setText(_translate("MainWindow", " Clean Inputs"))
        self.pushButton_3.setText(_translate("MainWindow", "  Go back"))
        self.pushButton_4.setText(_translate("MainWindow", "  Exit"))
        self.pushButton_5.setText(_translate("MainWindow", "  Plot record"))
        self.pushButton_6.setText(_translate("MainWindow", "  Load Record 2"))
        self.pushButton_7.setText(_translate("MainWindow", "  Load Record 3"))

        # Set pushButton ToolTip text

        self.pushButton.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#00007f;\">Load record 1</span></p></body></html>"))
        self.pushButton_2.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#00007f;\">Clean inputs</span></p></body></html>"))
        self.pushButton_3.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#aa0000;\">Go back to menu</span></p></body></html>"))
        self.pushButton_4.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#aa0000;\">Exit module</span></p></body></html>"))
        self.pushButton_5.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#00007f;\">Plot record</span></p></body></html>"))
        self.pushButton_6.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#00007f;\">Load record 2</span></p></body></html>"))
        self.pushButton_7.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600; color:#00007f;\">Load record 3</span></p></body></html>"))

        # Set radio Buttons text

        self.radioButton.setText(_translate("MainWindow", "One component"))
        self.radioButton_2.setText(_translate("MainWindow", "Three component"))

        # Set labels text

        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#000000;\">Directory 1 and path file 1:</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; color:#0000ff;\">Seismic Record Graph</span><span style=\" font-size:14pt; color:#0000ff;\">:</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; color:#aa5500;\">Frequency (Hz) :</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#aa5500;\">Frec Min (Hz):</span></p></body></html>"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#aa5500;\">Frec Max (Hz):</span></p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-style:italic; color:#00007f;\">The &quot;obspy&quot; library is used to read the seismic records, according to the different formats and the &quot;Matplotlib&quot; library to graph the seismic signals.</span></p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; color:#550000;\">Seismic Record Statistics</span></p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p>The Registry Statistics are:</p></body></html>"))
        self.label_12.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#00007f;\">Metadata file informations</span></p></body></html>"))
        self.label_13.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; color:#aa5500;\">Filter order</span></p></body></html>"))
        self.label_14.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; color:#aa5500;\"> Trace Number </span></p></body></html>"))
        self.label_15.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#00007f;\">Trace file informations</span></p></body></html>"))
        self.label_16.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#00007f;\">Select the file component number. By default = One</span></p></body></html>"))
        self.label_17.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:6pt; font-weight:600; font-style:italic; color:#00007f;\">By default = 0</span></p></body></html>"))
        self.label_18.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#550000;\">Directory 2 and path file 2:</span></p></body></html>"))
        self.label_20.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#000000;\">Directory 3 and path file 3:</span></p></body></html>"))
        self.label_22.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#00007f;\">Select the Filter parameters</span></p></body></html>"))
        self.label_23.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:6pt; font-weight:600; font-style:italic; color:#00007f;\">By default = 0</span></p></body></html>"))
        self.label_24.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; color:#aa5500;\"> Trace Number </span></p></body></html>"))
        self.label_25.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:6pt; font-weight:600; font-style:italic; color:#00007f;\">By default = 0</span></p></body></html>"))
        self.label_26.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:7pt; font-weight:600; color:#aa5500;\"> Trace Number </span></p></body></html>"))
        self.label_27.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:6pt; font-weight:600; font-style:italic; color:#00007f;\">By default = 4</span></p></body></html>"))
        self.label_28.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:7pt; font-weight:600; font-style:italic; color:#00007f;\">'Please be careful when loading the three components, indicate the same day'.</span></p></body></html>"))

        # Command buttons, Call to functions

        self.pushButton.clicked.connect(self.Read_records)                  # Call the Function to load and read records - File 1 (read Signals)
        self.pushButton_2.clicked.connect(self.Clean_Inputs)                # Call the function to Clear entries (Clear_Inputs)
        self.pushButton_3.clicked.connect(self.Back1)                       # Call function to Menu Module (Back)
        self.pushButton_4.clicked.connect(self.Exit1)                       # Call the function to exit system (Exit)
        self.pushButton_5.clicked.connect(self.Graficar)                    # Call the function to plot the records (Plot Record)
        self.pushButton_6.clicked.connect(self.Read_records2)               # Call the Function to load and read records - File 2 (read Signals)
        self.pushButton_7.clicked.connect(self.Read_records3)               # Call the Function to load and read records - File 3 (read Signals)

        # Validate so that only decimal numbers are accepted "QIntValidator": For "integers", you must put "QIntValidator".
        self.lineEdit.setValidator(QtGui.QDoubleValidator())            # Only accepts numbers in the Filter Frequency text box.
        self.lineEdit_2.setValidator(QtGui.QDoubleValidator())          # Only accepts numbers in the Minimum Frequency text box.
        self.lineEdit_3.setValidator(QtGui.QDoubleValidator())          # Only accepts numbers in the Max Frequency text box.

        # The value (1,999) indicates that only up to 4 integer positions are to be used.
        self.lineEdit_4.setValidator(QtGui.QIntValidator(1, 99))        # Only accepts numbers in the Filter order text box. Two-digit value.
        self.lineEdit_5.setValidator(QtGui.QIntValidator(1, 999))       # Only accepts numbers in the trace text box. Default value 0. - File 1. Value three digits.
        self.lineEdit_6.setValidator(QtGui.QIntValidator(1, 999))       # Only accepts numbers in the trace text box. Default value 0. - File 2. Value three digits.
        self.lineEdit_7.setValidator(QtGui.QIntValidator(1, 999))       # Only accepts numbers in the trace text box. Default value 0. - File 3. Value three digits.

        # Disable text boxes
        self.lineEdit.setEnabled(False)                                 # Deactivate the Frequency Text box.
        self.lineEdit_2.setEnabled(False)                               # Disables the minimum frequency text box. / (Min. Time).
        self.lineEdit_3.setEnabled(False)                               # Disables the maximum frequency text box. / (Max Time).
        self.lineEdit_4.setEnabled(False)                               # Deactivate the Filter Order Text box.
        self.lineEdit_5.setEnabled(False)                               # Disable Trace No. st[0] Text box. - File 1.
        self.lineEdit_6.setEnabled(False)                               # Disable Trace No. st[0] Text box. - File 2.
        self.lineEdit_7.setEnabled(False)                               # Disable Trace No. st[0] Text box. - File 3.

        # Initially text boxes
        self.lineEdit_4.setText("4")                                    # Inicia contenido de caja de texto de orden de filtro = 4.
        self.lineEdit_5.setText("0")                                    # Inicia contenido de caja de texto de Nº de Traza st[0]. - File 1.
        self.lineEdit_6.setText("0")                                    # Inicia contenido de caja de texto de Nº de Traza st[0]. - File 2.
        self.lineEdit_7.setText("0")                                    # Inicia contenido de caja de texto de Nº de Traza st[0]. - File 3.

        # Enable / Disable buttons for graphing (Disabled at startup)
        self.pushButton.setEnabled(False)                                   # Disable the Plot button for the Plot Record.

        # Enable / Disable buttons for plot (Disabled at startup)
        self.pushButton_5.setEnabled(False)                                 # Disable the pushbutton to load and read records - File 1 (read Signals).
        self.pushButton_6.setEnabled(False)                                 # Disable the pushbutton to load and read records - File 2 (read Signals).
        self.pushButton_7.setEnabled(False)                                 # Disable the pushbutton to load and read records - File 3 (read Signals).

        # Call to the function according to the ComboBox list for the Filter type.
        self.comboBox_2.activated.connect(self.selection_changed1)

        self.radioButton.toggled.connect(self.onClicked)                    # Call to the function to use the radiobutton according to whether it is clicked or not.

    # --- From here the functions to be used in the program are established ---
    # *** The functions for reading the directories and files to be loaded are established ***

    def Read_records(self):                                 # Function to load and read records - File 1 (read Signals).
        if sistema == "Windows":
            self.archivo_abierto=filedialog.askopenfilename(initialdir = "/",
                title = "Please, select file",filetypes = (("All Files","*.*"),
                ('SAC Files","*.sac'),
                ('MSEED Files','*.mseed'),
                ('NPY Files','*.npy'),
                ('GSE2 Files','*.gse2'),
                ('WAV Files','*.wav'),
                ('Kinemetrics Files','*.evt')))

            self.ruta = Path(self.archivo_abierto)
            self.ruta2 = self.ruta.joinpath(self.ruta).resolve()

            font=QtGui.QFont()
            font.setFamily("Times New Roman")
            font.setPointSize(8)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(60)
            self.label_2.setFont(font)                                      # Printing using text format.
            self.label_2.setText(self.archivo_abierto)                      # Printing on the file path label.

        else:                                            # If the system is Linux
            self.archivo_abierto=filedialog.askopenfilename(initialdir = "/",
                title = "Please, select file",filetypes = (("All Files","*.*"),
                ('SAC Files","*.sac'),
                ('MSEED Files','*.mseed'),
                ('NPY Files','*.npy'),
                ('GSE2 Files','*.gse2'),
                ('WAV Files','*.wav'),
                ('Kinemetrics Files','*.evt')))

            self.ruta = Path(self.archivo_abierto)
            self.ruta2 = self.ruta.joinpath(self.ruta).resolve()

            font=QtGui.QFont()
            font.setFamily("Times New Roman")
            font.setPointSize(8)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(60)
            self.label_2.setFont(font)                                      # Printing using text format.
            self.label_2.setText(self.archivo_abierto)                      # Printing on the file path label.

    def Read_records2(self):                                 # Function to load and read records - File 2 (read Signals)
        if sistema == "Windows":
            self.archivo_abierto=filedialog.askopenfilename(initialdir = "/",
                title = "Please, select file",filetypes = (("All Files","*.*"),
                ('SAC Files","*.sac'),
                ('MSEED Files','*.mseed'),
                ('NPY Files','*.npy'),
                ('GSE2 Files','*.gse2'),
                ('WAV Files','*.wav'),
                ('Kinemetrics Files','*.evt')))

            self.ruta = Path(self.archivo_abierto)
            self.ruta2 = self.ruta.joinpath(self.ruta).resolve()

            font=QtGui.QFont()
            font.setFamily("Times New Roman")
            font.setPointSize(8)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(60)
            self.label_19.setFont(font)                                      # Printing using text format.
            self.label_19.setText(self.archivo_abierto)                      # Printing on the file path label.

        else:                                            # If the system is Linux
            self.archivo_abierto=filedialog.askopenfilename(initialdir = "/",
                title = "Please, select file",filetypes = (("All Files","*.*"),
                ('SAC Files","*.sac'),
                ('MSEED Files','*.mseed'),
                ('NPY Files','*.npy'),
                ('GSE2 Files','*.gse2'),
                ('WAV Files','*.wav'),
                ('Kinemetrics Files','*.evt')))

            self.ruta = Path(self.archivo_abierto)
            self.ruta2 = self.ruta.joinpath(self.ruta).resolve()

            font=QtGui.QFont()
            font.setFamily("Times New Roman")
            font.setPointSize(8)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(60)
            self.label_19.setFont(font)                                      # Printing using text format.
            self.label_19.setText(self.archivo_abierto)                      # Printing on the file path label.

    def Read_records3(self):                                 # Function to load and read records - File 3 (read Signals)
        if sistema == "Windows":
            self.archivo_abierto=filedialog.askopenfilename(initialdir = "/",
                title = "Please, select file",filetypes = (("All Files","*.*"),
                ('SAC Files","*.sac'),
                ('MSEED Files','*.mseed'),
                ('NPY Files','*.npy'),
                ('GSE2 Files','*.gse2'),
                ('WAV Files','*.wav'),
                ('Kinemetrics Files','*.evt')))

            self.ruta = Path(self.archivo_abierto)
            self.ruta2 = self.ruta.joinpath(self.ruta).resolve()

            font=QtGui.QFont()
            font.setFamily("Times New Roman")
            font.setPointSize(8)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(60)
            self.label_21.setFont(font)                                      # Printing using text format.
            self.label_21.setText(self.archivo_abierto)                      # Printing on the file path label.

        else:                                            # If the system is Linux
            self.archivo_abierto=filedialog.askopenfilename(initialdir = "/",
                title = "Please, select file",filetypes = (("All Files","*.*"),
                ('SAC Files","*.sac'),
                ('MSEED Files','*.mseed'),
                ('NPY Files','*.npy'),
                ('GSE2 Files','*.gse2'),
                ('WAV Files','*.wav'),
                ('Kinemetrics Files','*.evt')))

            self.ruta = Path(self.archivo_abierto)
            self.ruta2 = self.ruta.joinpath(self.ruta).resolve()

            font=QtGui.QFont()
            font.setFamily("Times New Roman")
            font.setPointSize(8)
            font.setBold(False)
            font.setItalic(False)
            font.setWeight(60)
            self.label_21.setFont(font)                                      # Printing using text format.
            self.label_21.setText(self.archivo_abierto)                      # Printing on the file path label.

    def Clean_Inputs(self):                                             # Clean and leave everything as at the beginning.

        msg = QMessageBox()
        msg.setIcon(QMessageBox.Question)
        msg.setWindowTitle("Clean all inputs.")
        msg.setText("Are you sure to delete all entries?")
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        msg.setDefaultButton(QMessageBox.Ok)                            # By default, the focus is on the OK button
        returnValue = msg.exec()
        if returnValue == QMessageBox.Ok:                               # If the answer is OK

            # Position the ComboBox at the start.
            self.comboBox_2.setCurrentIndex(0)                                  # Position in the first Item (Filter Type)
            self.radioButton.setChecked(True)
            plt.close()                                                         # Close the existing chart.

            # Delete label content and Text Boxes.
            self.label_2.setText("")                                            # Delete the contents of the File Path label. - File 1.
            self.label_19.setText("")                                           # Delete the contents of the File Path label. - File 2.
            self.label_21.setText("")                                           # Delete the contents of the File Path label. - File 3.
            self.lineEdit.setText("")                                           # Clear the content of the Frequency text box.
            self.lineEdit_2.setText("")                                         # Clear the content of the minimum frequency text box.
            self.lineEdit_3.setText("")                                         # Clear the content of the maximum frequency text box.
            self.lineEdit_4.setText("4")                                        # Inicia contenido de caja de texto de Orden de filtro = 4.
            self.lineEdit_5.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 1.
            self.lineEdit_6.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 2
            self.lineEdit_7.setText("0")                                        # Clear the content of the trace number text box st[0]. -File 3
            self.label_9.setText("")                                            # Clear log statistics text box content.
            self.textEdit.setText("")                                           # Clear the content of the Metadata text box.
            self.textEdit_2.setText("")                                         # Clear the content of the Trace file information text box.

            # Set the statistics message as at the beginning.
            self.label_9.setText("<html><head/><body><p align=\"justify\"><span style=\" font-size:8pt;\">Registry Statistics are:</span></p></body></html>")

            # Disable text boxes again as at startup
            self.lineEdit.setEnabled(False)                                     # Disable the Frequency Text box.
            self.lineEdit_2.setEnabled(False)                                   # Disable the minimum frequency text box.
            self.lineEdit_3.setEnabled(False)                                   # Disable the maximum frequency text box.
            self.lineEdit_4.setEnabled(False)                                   # Disable the Filter Order text box.

            self.lineEdit_5.setEnabled(False)                                   # Disable the Trace No. st[0]. text box. - File 1.
            self.lineEdit_6.setEnabled(False)                                   # Disable the Trace No. st[0]. text box. - File 2.
            self.lineEdit_7.setEnabled(False)                                   # Disable the Trace No. st[0]. text box. - File 3.

            # Enable / Disable buttons for graphing (Disabled at startup)
            self.pushButton_5.setEnabled(False)                                 # Disable the Plot button for the Plot Record.

            # Enable / Disable buttons for plot (Disabled at startup)
            self.pushButton.setEnabled(False)                                   # Disable the pushbutton to load and read records - File 1 (read Signals)
            self.pushButton_6.setEnabled(False)                                 # Disable the pushbutton to load and read records - File 2 (read Signals)
            self.pushButton_7.setEnabled(False)                                 # Disable the pushbutton to load and read records - File 3 (read Signals)

            plt.close()                                                         # Close the existing chart.
        else:
            pass

    """  Function to manage the filter combobox  """

    def selection_changed1(self):  # Function that programs the list of the ComboBox for the Type of Filter

        #print("Utilizo comboBox")
        index = self.comboBox_2.currentIndex()                          # According to Combobox selection, its index is captured.

        if (0 == index):                                                # *** In case the combo index is 0, (Select) """
            # Position the ComboBoxes at the beginning
            self.activacion5()                                          # Call to the cleaning function Clean and Activation/Deactivation.

        elif (1 == index):                                              # *** In case the combo index is 1, (Lowpass) """
            # Position the ComboBoxes at the beginning
            if self.radioButton.isChecked() == True:
                self.activacion1()                                      # Call to the cleaning function and Activation/Deactivation 1
            else:
                self.activacion3()

        elif (2 == index):                                              # *** In case the combo index is 2, (Highpass) """
            # Position the ComboBoxes at the beginning
            if self.radioButton.isChecked() == True:
                self.activacion1()                                      # Call to the cleaning function and Activation/Deactivation 1
            else:
                self.activacion3()

        elif (3 == index):                                              # *** In case the combo index is 3, (Bandpass) """
            # Position the ComboBoxes at the beginning
            if self.radioButton.isChecked() == True:
                self.activacion2()                                      # Call to the cleaning function and Activation/Deactivation 2
            else:
                self.activacion4()

        elif (4 == index):                                              # *** In case the combo index is 3, (Bandstop) """
            # Position the ComboBoxes at the beginning
            if self.radioButton.isChecked() == True:
                self.activacion2()                                      # Call to the cleaning function and Activation/Deactivation 2
            else:
                self.activacion4()

        else:
            pass

    """ Function, which loads the functions for analysis with filters   """

    def Graficar(self):                                                    # Function to validate entries and plot Filters.

            index1 = self.comboBox_2.currentIndex()                         # Reading the ComboBox index.

            if (1 == index1):
                self.filtropasobajo()                                       # Lowpass filter.
            elif (2 == index1):
                self.filtropasoalto()                                       # Highpass filter.
            elif (3 == index1):
                self.filtropasabanda()                                      # Bandpass filter.
            elif (4 == index1):
                self.filtrobandstop()                                       # Stopband filter.
            else:
                pass


    """ Function to handle the activation / deactivation of text boxes in filters  """

    def activacion1(self):                        # To Activate/Deactivate and clean in Lowpass and Highpass with One component. ComboBox "Selection" -> Index 1 and 2.

        plt.close()                                                         # Close the existing chart.

        # Clean entrances.

        #self.label_2.setText("")                                           # Delete the contents of the File Path label. - File 1.
        self.label_19.setText("")                                           # Delete the contents of the File Path label. - File 2.
        self.label_21.setText("")                                           # Delete the contents of the File Path label. - File 3.

        #self.lineEdit.setText("")                                          # Clear the content of the Frequency text box.
        self.lineEdit_2.setText("")                                         # Clear the content of the minimum frequency text box.
        self.lineEdit_3.setText("")                                         # Clear the content of the maximum frequency text box.
        self.lineEdit_4.setText("4")                                        # Clear and enable the Filter Order text box = 4.
        self.lineEdit_5.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 1.
        self.lineEdit_6.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 2
        self.lineEdit_7.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 3

        # Enable and disable input text boxes.
        self.lineEdit.setEnabled(True)                                      # Enable the Frequency Text box.
        self.lineEdit_2.setEnabled(False)                                   # Disable the minimum frequency text box.
        self.lineEdit_3.setEnabled(False)                                   # Disable the maximum frequency text box.
        self.lineEdit_4.setEnabled(True)                                    # Enable the Filter Order text box.
        self.lineEdit_5.setEnabled(True)                                    # Enable the tarce number 1 text box.
        self.lineEdit_6.setEnabled(False)                                   # Disable the tarce number 2 text box.
        self.lineEdit_7.setEnabled(False)                                   # Disable the tarce number 3 text box.

        # Coloca el mensaje de las estadistica como al inicio
        self.label_9.setText("<html><head/><body><p align=\"justify\"><span style=\" font-size:8pt;\">Registry Statistics are:</span></p></body></html>")

        # Enable/Disable pushbutton to Plot records
        self.pushButton_5.setEnabled(True)                                  # Enable the pushbutton for the plot record

        # Enable/Disable pushbutton to Load records
        self.pushButton.setEnabled(True)                                    # Enable the pushbutton for the Load record. File - 1
        self.pushButton_6.setEnabled(False)                                 # Disable the pushbutton for the Load record. File - 2
        self.pushButton_7.setEnabled(False)                                 # Disable the pushbutton for the Load record. File - 3

        plt.close()                                                         # Close the existing chart.

    def activacion2(self):                          # To Activate/Deactivate and clean in Bandpass and Bandstop with One component. ComboBox "Selection" -> Index 3 and 4.

        plt.close()                                                         # Close the existing chart.

        # Clean entrances.

        self.label_19.setText("")                                           # Delete the contents of the File Path label. - File 2.
        self.label_21.setText("")                                           # Delete the contents of the File Path label. - File 3.

        self.lineEdit.setText("")                                           # Clear the content of the Frequency text box.
        self.lineEdit_4.setText("4")                                        # Clear and enable the Filter Order text box = 4.
        self.lineEdit_5.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 1.
        self.lineEdit_6.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 2
        self.lineEdit_7.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 3

        # Enable and disable input text boxes.
        self.lineEdit.setEnabled(False)                                     # Disable the Frequency Text box.
        self.lineEdit_2.setEnabled(True)                                    # Enable the minimum frequency text box.
        self.lineEdit_3.setEnabled(True)                                    # Enable the maximum frequency text box.
        self.lineEdit_4.setEnabled(True)                                    # Enable the Filter Order text box.
        self.lineEdit_5.setEnabled(True)                                    # Disable the tarce number 1 text box.
        self.lineEdit_6.setEnabled(False)                                   # Disable the tarce number 2 text box.
        self.lineEdit_7.setEnabled(False)                                   # Disable the tarce number 3 text box.

        # Enable/Disable pushbutton to Plot records
        self.pushButton_5.setEnabled(True)                                  # Enable the pushbutton for the plot record.

        # Enable/Disable pushbutton to Load records
        self.pushButton.setEnabled(True)                                    # Enable the pushbutton for the Load record. File - 1
        self.pushButton_6.setEnabled(False)                                 # Disable the pushbutton for the Load record. File - 2
        self.pushButton_7.setEnabled(False)                                 # Disable the pushbutton for the Load record. File - 3

        plt.close()                                                         # Close the existing chart.

    def activacion3(self):                        # To Activate/Deactivate and clean in Lowpass and Highpass with Three components. ComboBox "Selection" -> Index 1 and 2.

        plt.close()                                                         # Close the existing chart.

        # Clean entrances.

        #self.lineEdit.setText("")                                          # Clear the content of the Frequency text box.
        self.lineEdit_2.setText("")                                         # Clear the content of the minimum frequency text box.
        self.lineEdit_3.setText("")                                         # Clear the content of the maximum frequency text box.
        self.lineEdit_4.setText("4")                                        # Clear and enable the Filter Order text box = 4.
        self.lineEdit_5.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 1.
        self.lineEdit_6.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 2
        self.lineEdit_7.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 3

        # Enable and disable input text boxes.
        self.lineEdit.setEnabled(True)                                      # Enable the Frequency Text box.
        self.lineEdit_2.setEnabled(False)                                   # Disable the minimum frequency text box.
        self.lineEdit_3.setEnabled(False)                                   # Disable the maximum frequency text box.
        self.lineEdit_4.setEnabled(True)                                    # Enable the Filter Order text box.

        self.lineEdit_5.setEnabled(True)                                    # Enable the tarce number 1 text box. - File 1.
        self.lineEdit_6.setEnabled(True)                                    # Enable the tarce number 2 text box. - File 2.
        self.lineEdit_7.setEnabled(True)                                    # Enable the tarce number 3 text box. - File 3.

        # Enable/Disable pushbutton to Plot records
        self.pushButton_5.setEnabled(True)                                  # Enable the pushbutton for the plot record

        # Enable/Disable pushbutton to Load records
        self.pushButton.setEnabled(True)                                    # Enable the pushbutton for the Load record. File - 1
        self.pushButton_6.setEnabled(True)                                  # Enable the pushbutton for the Load record. File - 2
        self.pushButton_7.setEnabled(True)                                  # Enable the pushbutton for the Load record. File - 3

        plt.close()                                                         # Close the existing chart.

    def activacion4(self):                          # To Activate/Deactivate and clean in Bandpass and Bandstop with Three components. ComboBox "Selection" -> Index 3 and 4.

        plt.close()                                                         # Close the existing chart.

        # Clean entrances.

        self.lineEdit.setText("")                                           # Clear the content of the Frequency text box.
        self.lineEdit_4.setText("4")                                        # Clear and enable the Filter Order text box = 4.
        self.lineEdit_5.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 1.
        self.lineEdit_6.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 2
        self.lineEdit_7.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 3

        # Enable and disable input text boxes.
        self.lineEdit.setEnabled(False)                                     # Disable the Frequency Text box.
        self.lineEdit_2.setEnabled(True)                                    # Enable the minimum frequency text box.
        self.lineEdit_3.setEnabled(True)                                    # Enable the maximum frequency text box.
        self.lineEdit_4.setEnabled(True)                                    # Enable the Filter Order text box.
        self.lineEdit_5.setEnabled(True)                                    # Enable the tarce number 1 text box.
        self.lineEdit_6.setEnabled(True)                                    # Enable the tarce number 2 text box.
        self.lineEdit_7.setEnabled(True)                                    # Enable the tarce number 3 text box.

        # Enable/Disable pushbutton to Plot records
        self.pushButton_5.setEnabled(True)                                  # Enable the pushbutton for the plot record.

        # Enable/Disable pushbutton to Load records
        self.pushButton.setEnabled(True)                                    # Enable the pushbutton for the Load record. File - 1
        self.pushButton_6.setEnabled(True)                                  # Enable the pushbutton for the Load record. File - 2
        self.pushButton_7.setEnabled(True)                                  # Enable the pushbutton for the Load record. File - 3

        plt.close()                                                         # Close the existing chart.

    def activacion5(self):                                                  # Clean and leave everything as at the beginning. In case the combo index is 0, (Select) """

        # Position the ComboBox at the start.
        self.comboBox_2.setCurrentIndex(0)                                  # Position in the first Item (Filter Type)
        plt.close()                                                         # Close the existing chart.

        # Delete label content and Text Boxes.

        self.lineEdit.setText("")                                           # Clear the content of the Frequency text box.
        self.lineEdit_2.setText("")                                         # Clear the content of the minimum frequency text box.
        self.lineEdit_3.setText("")                                         # Clear the content of the maximum frequency text box.
        self.lineEdit_4.setText("4")                                        # Inicia contenido de caja de texto de Orden de filtro = 4.
        self.lineEdit_5.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 1.
        self.lineEdit_6.setText("0")                                        # Clear the content of the trace number text box st[0]. - File 2
        self.lineEdit_7.setText("0")                                        # Clear the content of the trace number text box st[0]. -File 3
        self.label_9.setText("")                                            # Clear log statistics text box content.

        # Set the statistics message as at the beginning.
        self.label_9.setText("<html><head/><body><p align=\"justify\"><span style=\" font-size:9pt;\">Registry Statistics are:</span></p></body></html>")

        # Disable text boxes again as at startup
        self.lineEdit.setEnabled(False)                                     # Disable the Frequency Text box.
        self.lineEdit_2.setEnabled(False)                                   # Disable the minimum frequency text box.
        self.lineEdit_3.setEnabled(False)                                   # Disable the maximum frequency text box.
        self.lineEdit_4.setEnabled(False)                                   # Disable the Filter Order text box.

        self.lineEdit_5.setEnabled(False)                                   # Disable the Trace No. st[0]. text box. - File 1.
        self.lineEdit_6.setEnabled(False)                                   # Disable the Trace No. st[0]. text box. - File 2.
        self.lineEdit_7.setEnabled(False)                                   # Disable the Trace No. st[0]. text box. - File 3.

        # Enable / Disable buttons for graphing (Disabled at startup)
        self.pushButton_5.setEnabled(False)                                 # Disable the Plot button for the Plot Record.

        # Enable / Disable buttons for plot (Disabled at startup)
        self.pushButton.setEnabled(False)                                   # Disable the pushbutton to load and read records - File 1 (read Signals)
        self.pushButton_6.setEnabled(False)                                 # Disable the pushbutton to load and read records - File 2 (read Signals)
        self.pushButton_7.setEnabled(False)                                 # Disable the pushbutton to load and read records - File 3 (read Signals)

        plt.close()                                                         # Close the existing chart.


    def onClicked(self):            # Function to enable and disable the comboBox using the radioButton.

        if self.radioButton.isChecked() == True:

            # Enable/Disable pushbutton to Load records.
            self.pushButton.setEnabled(True)                                    # Enable the pushbutton for the Load record. File - 1
            self.pushButton_6.setEnabled(False)                                 # Enable the pushbutton for the Load record. File - 2
            self.pushButton_7.setEnabled(False)                                 # Enable the pushbutton for the Load record. File - 3

            self.lineEdit_5.setEnabled(True)                                    # Enable the tarce number 1 text box. - File 1.
            self.lineEdit_6.setEnabled(False)                                   # Enable the tarce number 2 text box. - File 2.
            self.lineEdit_7.setEnabled(False)                                   # Enable the tarce number 3 text box. - File 3.

        else:
            # Enable/Disable pushbutton to Load records.
            self.pushButton.setEnabled(True)                                    # Enable the pushbutton for the Load record. File - 1
            self.pushButton_6.setEnabled(True)                                  # Enable the pushbutton for the Load record. File - 2
            self.pushButton_7.setEnabled(True)                                  # Enable the pushbutton for the Load record. File - 3

            self.lineEdit_5.setEnabled(True)                                    # Enable the tarce number 1 text box. - File 1.
            self.lineEdit_6.setEnabled(True)                                    # Enable the tarce number 2 text box. - File 2.
            self.lineEdit_7.setEnabled(True)                                    # Enable the tarce number 3 text box. - File 3.


    """  *** Functions to perform analysis with filters (1-4) ***     """

    def filtropasobajo(self):                                               # 1.- Function to execute the Lowpass filter

        try:

            if self.radioButton.isChecked() == True:

                # Verify that the Frequency text box is not empty
                if not self.lineEdit.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_4.text():
                    MensCombo2 = QMessageBox()
                    MensCombo2.setIcon(QMessageBox.Warning)
                    MensCombo2.setWindowTitle("Empty Filter Order")
                    MensCombo2.setText("Please, enter a valid Value")
                    returnValue = MensCombo2.exec()

                elif not self.lineEdit_5.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.label_2.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Directory and file 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                else:
                    # Filtering with a lowpass.
                    plt.close()                                                 # Close the existing chart.

                    archivoFil1 = (self.label_2.text())                         # Record label reading (Load file -1)

                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    frec1 = (self.lineEdit.text())                              # Frequency label reading.
                    orden1 = (self.lineEdit_4.text())                           # Reading Filter Order.

                    st  = obspy.read(archivoFil1)                               # Reading file according to format.

                    # Convertir a flotante el valor string de la caja de texto
                    frec2=float(frec1)                                          # Converts Frequency value to float.
                    orden2=int(orden1)                                          # Converts filter order value to integer.

                    # Enter and convert the string value of the No. Traces st[0] text box to an integer.
                    NTraza = (self.lineEdit_5.text())                           # Reading the contents of the text box Trace No. st[0].
                    Ntraza2 = int(NTraza)                                       # Converts the value of the Trace Number to an integer.
                    tr = st[Ntraza2]                                            # Assigns the indicated trace number to the Stream for record processing.

                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('lowpass', freq=frec2, corners=orden2, zerophase=True)
                    # Where corners = filter order, order 4
                    t = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    ax = plt.subplot(211)

                    plt.plot(t, tr.data, 'k', label='Original Record')          # Where 'k' is the color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # To place the legend on the left.

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()
                    plt.subplot(212, sharex=ax)
                    plt.plot(t, tr_filt.data, 'b', label='Filtered Record')     # b = color, blue
                    plt.legend(prop = {'size': 10}, loc='upper right')          # To place the legend on the left
                    # color for plot: k=black, r=red, b=blue,
                    # lineas-> : = dotted line style, -- = dashed line style
                    plt.ylabel('Filtered data Lowpassed', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=19)
                    #plt.title(u'Filtered Record - Lowpass', color ="darkgreen", fontsize=22)  # We put a title
                    plt.suptitle("Record : " + root + ' - Filtered Record - Lowpass', color ="darkgreen", fontsize=19)
                    plt.grid()                                                   # Presents the grid in the graph.
                    plt.show()

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)

                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata

                    stream = Stream(traces=[st])                                # To present the total number of traces.
                    A5 = (Stream.__str__(st, extended=True))                    # Variable that contains the total number of traces in the record.
                    mg3 = "%s" %(A5)                                            # Convert trace data to string or text.

                    # Text format.
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Printing using text format.
                    self.label_9.setText(msg_e1)                                # Record statistic printing on the label.

                    self.textEdit.setText(msg_e2)                               # Place the Metadata information in text box 1.
                    self.textEdit_2.setText(mg3)                                # Place the information of the Number of Traces in text box 2.

            else:

                # Function to use the Lowpass filter with the three components.

                # Verify that the text boxes and labels not empty.

                if not self.lineEdit.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_4.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Empty Filter Order")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.lineEdit_5.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                elif not self.lineEdit_6.text():
                    MensCombo6 = QMessageBox()
                    MensCombo6.setIcon(QMessageBox.Warning)
                    MensCombo6.setWindowTitle("Trace No. File - 2 Empty")
                    MensCombo6.setText("Please, enter a valid Value")
                    returnValue = MensCombo6.exec()

                elif not self.lineEdit_7.text():
                    MensCombo7 = QMessageBox()
                    MensCombo7.setIcon(QMessageBox.Warning)
                    MensCombo7.setWindowTitle("Trace No. File - 3 Empty")
                    MensCombo7.setText("Please, enter a valid Value")
                    returnValue = MensCombo7.exec()

                elif not self.label_2.text():
                    MensCombo8 = QMessageBox()
                    MensCombo8.setIcon(QMessageBox.Warning)
                    MensCombo8.setWindowTitle("Directory and file 1 Empty")
                    MensCombo8.setText("Please, enter a valid Value")
                    returnValue = MensCombo8.exec()

                elif not self.label_19.text():
                    MensCombo9 = QMessageBox()
                    MensCombo9.setIcon(QMessageBox.Warning)
                    MensCombo9.setWindowTitle("Directory and file 2 Empty")
                    MensCombo9.setText("Please, enter a valid Value")
                    returnValue = MensCombo9.exec()

                elif not self.label_21.text():
                    MensCombo10 = QMessageBox()
                    MensCombo10.setIcon(QMessageBox.Warning)
                    MensCombo10.setWindowTitle("Directory and file 3 Empty")
                    MensCombo10.setText("Please, enter a valid Value")
                    returnValue = MensCombo10.exec()

                else:

                    # *** READING THE FILES 1 -3 ***

                    # Filtering with a Lowpass.
                    plt.close()                                                 # Close the existing chart.
                    archivoFil1 = (self.label_2.text())                         # Load file -1
                    archivoFil2 = (self.label_19.text())                        # Load file -2
                    archivoFil3 = (self.label_21.text())                        # Load file -3

                    # To get the file name
                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    # Reading input parameters text boxes
                    frec1 = (self.lineEdit.text())                              # Frequency label reading.
                    orden1 = (self.lineEdit_4.text())                           # Filter order label reading.

                    # Reading file according to the format through the "obspy" library.
                    st  = obspy.read(archivoFil1)                               # Reading file 1.
                    st2  = obspy.read(archivoFil2)                              # Reading file 2.
                    st3  = obspy.read(archivoFil3)                              # Reading file 3.

                    # Convert the string value of the text box to float or int value
                    frec2=float(frec1)                                          # Converts the Frequency value to floating.
                    orden2=int(orden1)                                          # Converts filter order value to integer.

                    # *** READING AND CONVERSION OF TRACES FOR THE THREE COMPONENTS ****

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 1 ****
                    NTraza = (self.lineEdit_5.text())                           # Reading the contents of the text box Trace No. st[0].
                    Ntraza2 = int(NTraza)                                       # Converts the value of the Trace Number to an integer.
                    tr = st[Ntraza2]                                            # Assigns the indicated trace number to the Stream for record processing.

                    #Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 2 ****
                    NTrazaB = (self.lineEdit_6.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2B = int(NTrazaB)                                     # Converts the value of the Trace Number to an integer.
                    tr2 = st2[Ntraza2B]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 3 ****
                    NTrazaC = (self.lineEdit_7.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2C = int(NTrazaC)                                     # Converts the value of the Trace Number to an integer.
                    tr3 = st3[Ntraza2C]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # *** CONSTRUCTION OF THE DATA FILE, SIZE, FILTER AND TIME VECTOR FOR THE THREE COMPONENTS ***

                    # *** For File -1
                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('lowpass', freq=frec2, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t1 = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    # *** For File -2
                    tr2.stats.station
                    tr2_filt = tr2.copy()
                    s2 = len(tr2)
                    tr2_filt.filter('lowpass', freq=frec2, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t2 = np.arange(0, tr2.stats.npts / tr2.stats.sampling_rate, tr2.stats.delta)

                    # *** For File -3
                    tr3.stats.station
                    tr3_filt = tr3.copy()
                    s3 = len(tr3)
                    tr3_filt.filter('lowpass', freq=frec2, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t3 = np.arange(0, tr3.stats.npts / tr3.stats.sampling_rate, tr3.stats.delta)

                    # *** HERE, THE THREE GRAPHICS OF THE THREE COMPONENTS ARE CALCULATED AND PRESENTED ****

                    # Graphics: original and filtered for File 1

                    fig, ax = plt.subplots(layout="constrained")
                    ax = plt.subplot(321)

                    plt.plot(t1, tr.data, 'k', label='Original Record')          # Where 'k' is the color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(322, sharex=ax)
                    plt.plot(t1, tr_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Lowpass', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - lowpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    plt.suptitle("Record : " + root + ' - Filtered Record - Lowpass',  color ="darkgreen", fontsize=19)
                    plt.grid()                                                   # presenta la cuadricula en el grafico

                    # Graphics: original and filtered for File 2

                    plt.subplot(323, sharex=ax)
                    plt.plot(t2, tr2.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(324, sharex=ax)
                    plt.plot(t2, tr2_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Lowpass', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - highpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    plt.grid()

                    # Graphics: original and filtered for File 3

                    plt.subplot(325, sharex=ax)
                    plt.plot(t3, tr3.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(326, sharex=ax)
                    plt.plot(t3, tr3_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Lowpass', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - lowpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    plt.grid()

                    plt.show()

                    # *** FOR THE CALCULATION OF THE STATISTICS IN THE THREE COMPONENTS ***

                    # *** CALCULATION OF DATA FOR FILE 1 ***

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing, File 1
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)


                    # *** CALCULATION OF DATA FOR FILE 2 ***

                    # Seismic record statistics calculations
                    datos2 = tr2.data
                    # Calculate the arithmetic mean
                    Ftr2 = datos2.mean()
                    # Calculate the median
                    FMed2 = np.median(datos2)
                    # Calculate the standard deviation
                    DT2 = np.std(datos2)
                    # Calculate the variance
                    VAR2 = np.var(datos2)

                    # Record Statistics Printing, File 1
                    msg_e1B = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr2, " | The median is: ", FMed2,
                             " | The The S.D. is: ", DT2, " | The variance is: ", VAR2,
                             "| The fs  (Hz) is:", tr2.stats.sampling_rate, "| The Samples No.: ", tr2.stats.npts, "| The Format is :", tr2.stats._format)

                    # *** CALCULATION OF DATA FOR FILE 3 ***

                    # Seismic record statistics calculations
                    datos3 = tr3.data
                    # Calculate the arithmetic mean
                    Ftr3 = datos3.mean()
                    # Calculate the median
                    FMed3 = np.median(datos3)
                    # Calculate the standard deviation
                    DT3 = np.std(datos3)
                    # Calculate the variance
                    VAR3 = np.var(datos3)

                    # Record Statistics Printing, File 1
                    msg_e1C = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr3, " | The median is: ", FMed3,
                             " | The The S.D. is: ", DT3, " | The variance is: ", VAR3,
                             "| The fs  (Hz) is:", tr3.stats.sampling_rate, "| The Samples No.: ", tr3.stats.npts, "| The Format is :", tr3.stats._format)

                    # To present Metadata file and Trace file informations. File 1

                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata.
                    stream = Stream(traces=[st])                                # To present the total number of traces. File 1
                    A5 = (Stream.__str__(st, extended=True))                    # Variable that contains the total number of traces in the record.
                    mg3 = "%s" %(A5)                                            # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 2

                    msg_e2B = "%s" % (tr2.stats)                                # To present the metadata
                    stream = Stream(traces=[st2])                               # To present the total number of traces. File 2
                    A5B = (Stream.__str__(st2, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3B = "%s" %(A5B)                                          # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 3

                    msg_e2C = "%s" % (tr3.stats)                                # To present the metadata
                    stream = Stream(traces=[st3])                               # To present the total number of traces. File 3
                    A5C = (Stream.__str__(st3, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3C = "%s" %(A5C)                                          # Convert trace data to string or text.


                    # Text format for the three files: 1, 2, 3
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Printing using text format. Files: 1, 2, 3
                    self.label_9.setText('1.-'+ msg_e1 + '\n' + '2.-' + msg_e1B + '\n' + '3.-' + msg_e1C)      # Printing on the label of the Record statistics. Files: 1, 2, 3

                    self.textEdit.setText('File 1: '+ msg_e2 + "\n\n" + 'File 2: ' + msg_e2B + "\n\n" + 'File 3: ' + msg_e2C)       # Place the Metadata information in text box 1. Files: 1, 2, 3
                    self.textEdit_2.setText('File 1: '+ mg3 + "\n\n" + 'File 2: ' + mg3B + "\n\n" + 'File 3: ' + mg3C)              # Place the information on the Number of Traces in text box 2. Files: 1, 2, 3

        except:
                plt.close()                                                 # Close the existing chart.
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Warning)
                msgBox.setText("The File Does not exist, is Invalid or the Format is not recognized. Please, try again ...")
                msgBox.setWindowTitle("Invalid Record File")
                returnValue = msgBox.exec()
                pass


    def filtropasoalto(self):                                               # 2.- Function to execute the Highpass filter

        try:

            if self.radioButton.isChecked() == True:

                # Function to execute the Highpass filter to one component

                # Verify that the Frequency text box is not empty
                if not self.lineEdit.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_4.text():
                    MensCombo2 = QMessageBox()
                    MensCombo2.setIcon(QMessageBox.Warning)
                    MensCombo2.setWindowTitle("Empty Filter Order")
                    MensCombo2.setText("Please, enter a valid Value")
                    returnValue = MensCombo2.exec()

                elif not self.lineEdit_5.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.label_2.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Directory and file 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                else:
                    # Filtering with a lowpass.
                    plt.close()                                                 # Close the existing chart.

                    archivoFil1 = (self.label_2.text())                         # Lectura etiqueta del Record (Load file -1)

                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    frec1 = (self.lineEdit.text())                              # Frequency label reading.
                    orden1 = (self.lineEdit_4.text())                           # Lectura del orden del Filter

                    st  = obspy.read(archivoFil1)                               # Lectura archivo de acuerdo al formato

                    # Convertir a flotante el valor string de la caja de texto
                    frec2=float(frec1)                                          # Convierte el valor de Frecuencia a flotante
                    orden2=int(orden1)                                          # Convierte el valor del orden del filtro a entero

                    # Ingresar y convertir a entero el valor string de la caja de texto Nº Trazas st[0]
                    NTraza = (self.lineEdit_5.text())                           # Lectura del contenido de la caja de texto Nº Traza st[0]
                    Ntraza2 = int(NTraza)                                       # Convierte el valor del Nº de Traza a entero
                    tr = st[Ntraza2]                                            # Asigna el número de traza indicado al Stream para tratamiento del registro

                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('highpass', freq=frec2, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    ax = plt.subplot(211)

                    plt.plot(t, tr.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()
                    plt.subplot(212, sharex=ax)
                    plt.plot(t, tr_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Highpass', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - Highpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    plt.suptitle("Record : " + root + ' - Filtered Record - Highpass', color ="darkgreen", fontsize=19)
                    plt.grid()                                                   # presenta la cuadricula en el grafico
                    plt.show()

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)


                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata

                    stream = Stream(traces=[st])                                # Para presentar el numero de trazas total
                    A5 = (Stream.__str__(st, extended=True))                    # Variable que contiene el numero total de trazas del registro
                    mg3 = "%s" %(A5)                                            # convertir a string o texto los datos de las trazas

                    # Formato de Texto
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Impresion mediante el formato de texto
                    self.label_9.setText(msg_e1)                                # Impresión en la eiqueta de la estadistica del Record

                    self.textEdit.setText(msg_e2)                               # Coloca la información de Metadatos en el cuadro de texto 1
                    self.textEdit_2.setText(mg3)                                # Coloca la información del Nº de Trazas en el cuadro de texto 2

            else:

                # Function to use the Highpass filter with the three components.

                # Verify that the text boxes and labels not empty.

                if not self.lineEdit.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_4.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Empty Filter Order")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.lineEdit_5.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                elif not self.lineEdit_6.text():
                    MensCombo6 = QMessageBox()
                    MensCombo6.setIcon(QMessageBox.Warning)
                    MensCombo6.setWindowTitle("Trace No. File - 2 Empty")
                    MensCombo6.setText("Please, enter a valid Value")
                    returnValue = MensCombo6.exec()

                elif not self.lineEdit_7.text():
                    MensCombo7 = QMessageBox()
                    MensCombo7.setIcon(QMessageBox.Warning)
                    MensCombo7.setWindowTitle("Trace No. File - 3 Empty")
                    MensCombo7.setText("Please, enter a valid Value")
                    returnValue = MensCombo7.exec()

                elif not self.label_2.text():
                    MensCombo8 = QMessageBox()
                    MensCombo8.setIcon(QMessageBox.Warning)
                    MensCombo8.setWindowTitle("Directory and file 1 Empty")
                    MensCombo8.setText("Please, enter a valid Value")
                    returnValue = MensCombo8.exec()

                elif not self.label_19.text():
                    MensCombo9 = QMessageBox()
                    MensCombo9.setIcon(QMessageBox.Warning)
                    MensCombo9.setWindowTitle("Directory and file 2 Empty")
                    MensCombo9.setText("Please, enter a valid Value")
                    returnValue = MensCombo9.exec()

                elif not self.label_21.text():
                    MensCombo10 = QMessageBox()
                    MensCombo10.setIcon(QMessageBox.Warning)
                    MensCombo10.setWindowTitle("Directory and file 3 Empty")
                    MensCombo10.setText("Please, enter a valid Value")
                    returnValue = MensCombo10.exec()

                else:

                    # *** READING THE FILES 1 -3 ***

                    # Filtering with a Highpass.
                    plt.close()                                                 # Close the existing chart.
                    archivoFil1 = (self.label_2.text())                         # Load file -1
                    archivoFil2 = (self.label_19.text())                        # Load file -2
                    archivoFil3 = (self.label_21.text())                        # Load file -3

                    # To get the file name
                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    # Reading input parameters text boxes
                    frec1 = (self.lineEdit.text())                              # Frequency label reading.
                    orden1 = (self.lineEdit_4.text())                           # Filter order label reading.

                    # Reading file according to the format through the "obspy" library.
                    st  = obspy.read(archivoFil1)                               # Reading file 1.
                    st2  = obspy.read(archivoFil2)                              # Reading file 2.
                    st3  = obspy.read(archivoFil3)                              # Reading file 3.

                    # Convert the string value of the text box to float or int value
                    frec2=float(frec1)                                          # Converts the Frequency value to floating.
                    orden2=int(orden1)                                          # Converts filter order value to integer.

                    # *** READING AND CONVERSION OF TRACES FOR THE THREE COMPONENTS ****

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 1 ****
                    NTraza = (self.lineEdit_5.text())                           # Reading the contents of the text box Trace No. st[0].
                    Ntraza2 = int(NTraza)                                       # Converts the value of the Trace Number to an integer.
                    tr = st[Ntraza2]                                            # Assigns the indicated trace number to the Stream for record processing.

                    #Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 2 ****
                    NTrazaB = (self.lineEdit_6.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2B = int(NTrazaB)                                     # Converts the value of the Trace Number to an integer.
                    tr2 = st2[Ntraza2B]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 3 ****
                    NTrazaC = (self.lineEdit_7.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2C = int(NTrazaC)                                     # Converts the value of the Trace Number to an integer.
                    tr3 = st3[Ntraza2C]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # *** CONSTRUCTION OF THE DATA FILE, SIZE, FILTER AND TIME VECTOR FOR THE THREE COMPONENTS ***

                    # *** For File -1
                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('highpass', freq=frec2, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t1 = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    # *** For File -2
                    tr2.stats.station
                    tr2_filt = tr2.copy()
                    s2 = len(tr2)
                    tr2_filt.filter('highpass', freq=frec2, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t2 = np.arange(0, tr2.stats.npts / tr2.stats.sampling_rate, tr2.stats.delta)

                    # *** For File -3
                    tr3.stats.station
                    tr3_filt = tr3.copy()
                    s3 = len(tr3)
                    tr3_filt.filter('highpass', freq=frec2, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t3 = np.arange(0, tr3.stats.npts / tr3.stats.sampling_rate, tr3.stats.delta)


                    # *** AHERE, THE THREE GRAPHICS OF THE THREE COMPONENTS ARE CALCULATED AND PRESENTED ****

                    # Graphics: original and filtered for File 1

                    fig, ax = plt.subplots(layout="constrained")
                    ax = plt.subplot(321)

                    plt.plot(t1, tr.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(322, sharex=ax)
                    plt.plot(t1, tr_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Highpass', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - highpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    plt.suptitle("Record : " + root + ' - Filtered Record - Highpass',  color ="darkgreen", fontsize=19)
                    plt.grid()                                                   # presenta la cuadricula en el grafico

                    # Graphics: original and filtered for File 2

                    plt.subplot(323, sharex=ax)
                    plt.plot(t2, tr2.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(324, sharex=ax)
                    plt.plot(t2, tr2_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Highpass', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - highpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    plt.grid()

                    # Graphics: original and filtered for File 3

                    plt.subplot(325, sharex=ax)
                    plt.plot(t3, tr3.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(326, sharex=ax)
                    plt.plot(t3, tr3_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Highpass', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - highpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    plt.grid()

                    plt.show()

                    # *** FOR THE CALCULATION OF THE STATISTICS IN THE THREE COMPONENTS ***

                    # *** CALCULATION OF DATA FOR FILE 1 ***

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing, File 1
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)


                    # *** CALCULATION OF DATA FOR FILE 2 ***

                    # Seismic record statistics calculations
                    datos2 = tr2.data
                    # Calculate the arithmetic mean
                    Ftr2 = datos2.mean()
                    # Calculate the median
                    FMed2 = np.median(datos2)
                    # Calculate the standard deviation
                    DT2 = np.std(datos2)
                    # Calculate the variance
                    VAR2 = np.var(datos2)

                    # Record Statistics Printing, File 2
                    msg_e1B = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr2, " | The median is: ", FMed2,
                             " | The The S.D. is: ", DT2, " | The variance is: ", VAR2,
                             "| The fs  (Hz) is:", tr2.stats.sampling_rate, "| The Samples No.: ", tr2.stats.npts, "| The Format is :", tr2.stats._format)

                    # *** CALCULATION OF DATA FOR FILE 3 ***

                    # Seismic record statistics calculations
                    datos3 = tr3.data
                    # Calculate the arithmetic mean
                    Ftr3 = datos3.mean()
                    # Calculate the median
                    FMed3 = np.median(datos3)
                    # Calculate the standard deviation
                    DT3 = np.std(datos3)
                    # Calculate the variance
                    VAR3 = np.var(datos3)

                    # Record Statistics Printing, File 3
                    msg_e1C = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr3, " | The median is: ", FMed3,
                             " | The The S.D. is: ", DT3, " | The variance is: ", VAR3,
                             "| The fs  (Hz) is:", tr3.stats.sampling_rate, "| The Samples No.: ", tr3.stats.npts, "| The Format is :", tr3.stats._format)


                    # To present Metadata file and Trace file informations. File 1

                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata.
                    stream = Stream(traces=[st])                                # To present the total number of traces. File 1
                    A5 = (Stream.__str__(st, extended=True))                    # Variable that contains the total number of traces in the record.
                    mg3 = "%s" %(A5)                                            # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 2

                    msg_e2B = "%s" % (tr2.stats)                                # To present the metadata
                    stream = Stream(traces=[st2])                               # To present the total number of traces. File 2
                    A5B = (Stream.__str__(st2, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3B = "%s" %(A5B)                                          # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 3

                    msg_e2C = "%s" % (tr3.stats)                                # To present the metadata
                    stream = Stream(traces=[st3])                               # To present the total number of traces. File 3
                    A5C = (Stream.__str__(st3, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3C = "%s" %(A5C)                                          # Convert trace data to string or text.

                    # Text format for the three files: 1, 2, 3
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Printing using text format. Files: 1, 2, 3
                    self.label_9.setText('1.-'+ msg_e1 + '\n' + '2.-' + msg_e1B + '\n' + '3.-' + msg_e1C)      # Printing on the label of the Record statistics. Files: 1, 2, 3

                    self.textEdit.setText('File 1: '+ msg_e2 + "\n\n" + 'File 2: ' + msg_e2B + "\n\n" + 'File 3: ' + msg_e2C)       # Place the Metadata information in text box 1. Files: 1, 2, 3
                    self.textEdit_2.setText('File 1: '+ mg3 + "\n\n" + 'File 2: ' + mg3B + "\n\n" + 'File 3: ' + mg3C)              # Place the information on the Number of Traces in text box 2. Files: 1, 2, 3

        except:
                plt.close()                                                 # Close the existing chart.
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Warning)
                msgBox.setText("The File Does not exist, is Invalid or the Format is not recognized. Please, try again ...")
                msgBox.setWindowTitle("Invalid Record File")
                returnValue = msgBox.exec()
                pass


    def filtropasabanda(self):                                               # 3.- Function to execute the Bandpass filter

        try:

            if self.radioButton.isChecked() == True:

                # Fuction to execute tne Bandpass filter for one component

                # Verify that the Frequency text box is not empty
                if not self.lineEdit_2.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency Min.")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_3.text():
                    MensCombo2 = QMessageBox()
                    MensCombo2.setIcon(QMessageBox.Warning)
                    MensCombo2.setWindowTitle("Empty Frequency Max.")
                    MensCombo2.setText("Please, enter a valid Value")
                    returnValue = MensCombo2.exec()

                elif not self.lineEdit_4.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Empty Filter Order")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.lineEdit_5.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                elif not self.label_2.text():
                    MensCombo5 = QMessageBox()
                    MensCombo5.setIcon(QMessageBox.Warning)
                    MensCombo5.setWindowTitle("Directory and file 1 Empty")
                    MensCombo5.setText("Please, enter a valid Value")
                    returnValue = MensCombo5.exec()

                else:
                    # Filtering with a Bandpass.
                    plt.close()                                                 # Close the existing chart.
                    archivoFil1 = (self.label_2.text())                         # Load directory and path file  (Load file -1)

                    # To get the file name
                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    # Reading input parameters text boxes
                    frecM = (self.lineEdit_2.text())                            # Minimum frequency label reading
                    frecMax = (self.lineEdit_3.text())                          # Maximum frequency label reading
                    orden1 = (self.lineEdit_4.text())                           # Filter order label reading

                    # Reading file according to the format through the "obspy" library
                    st  = obspy.read(archivoFil1)

                    # Convert the string value of the text box to float or int value
                    frec7=float(frecM)                                          # Convierte a flotante el valor de la Frec. Min.
                    frec8=float(frecMax)                                        # Convierte a flotante el valor de la Frec. Max.
                    orden2=int(orden1)                                          # Convierte el valor del orden del filtro a entero

                    # Ingresar y convertir a entero el valor string de la caja de texto Nº Trazas st[0]
                    NTraza = (self.lineEdit_5.text())                           # Lectura del contenido de la caja de texto Nº Traza st[0]
                    Ntraza2 = int(NTraza)                                       # Convierte el valor del Nº de Traza a entero
                    tr = st[Ntraza2]                                            # Asigna el número de traza indicado al Stream para tratamiento del registro

                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('bandpass', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    #ax = plt.subplot(211)

                    #plt.plot(t, tr.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    #plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    #plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    #plt.grid()
                    ax = plt.subplot(111)
                    #plt.subplot(111, sharex=ax)
                    plt.plot(t, tr_filt.data, 'b', label='26 Agosto 2014')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    #plt.ylabel('Filtered data Bandpass', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - Bandpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : " + root + ' - Filtered Record - Bandpass', color ="darkgreen", fontsize=19)

                    plt.title(u'Colima EZV4 - 2014', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.grid()                                                   # presenta la cuadricula en el grafico
                    plt.show()

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)


                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata

                    stream = Stream(traces=[st])                                # Para presentar el numero de trazas total
                    A5 = (Stream.__str__(st, extended=True))                    # Variable que contiene el numero total de trazas del registro
                    mg3 = "%s" %(A5)                                            # convertir a string o texto los datos de las trazas

                    # Formato de Texto
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Impresion mediante el formato de texto
                    self.label_9.setText(msg_e1)                                # Impresión en la eiqueta de la estadistica del Record

                    self.textEdit.setText(msg_e2)                               # Coloca la información de Metadatos en el cuadro de texto 1
                    self.textEdit_2.setText(mg3)                                # Coloca la información del Nº de Trazas en el cuadro de texto 2

            else:

                # Function to use the Bandpass filter with the three components.

                # Verify that the text boxes and labels not empty.
                if not self.lineEdit_2.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency Min.")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_3.text():
                    MensCombo2 = QMessageBox()
                    MensCombo2.setIcon(QMessageBox.Warning)
                    MensCombo2.setWindowTitle("Empty Frequency Max.")
                    MensCombo2.setText("Please, enter a valid Value")
                    returnValue = MensCombo2.exec()

                elif not self.lineEdit_4.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Empty Filter Order")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.lineEdit_5.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                elif not self.lineEdit_6.text():
                    MensCombo6 = QMessageBox()
                    MensCombo6.setIcon(QMessageBox.Warning)
                    MensCombo6.setWindowTitle("Trace No. File - 2 Empty")
                    MensCombo6.setText("Please, enter a valid Value")
                    returnValue = MensCombo6.exec()

                elif not self.lineEdit_7.text():
                    MensCombo7 = QMessageBox()
                    MensCombo7.setIcon(QMessageBox.Warning)
                    MensCombo7.setWindowTitle("Trace No. File - 3 Empty")
                    MensCombo7.setText("Please, enter a valid Value")
                    returnValue = MensCombo7.exec()

                elif not self.label_2.text():
                    MensCombo8 = QMessageBox()
                    MensCombo8.setIcon(QMessageBox.Warning)
                    MensCombo8.setWindowTitle("Directory and file 1 Empty")
                    MensCombo8.setText("Please, enter a valid Value")
                    returnValue = MensCombo8.exec()

                elif not self.label_19.text():
                    MensCombo9 = QMessageBox()
                    MensCombo9.setIcon(QMessageBox.Warning)
                    MensCombo9.setWindowTitle("Directory and file 2 Empty")
                    MensCombo9.setText("Please, enter a valid Value")
                    returnValue = MensCombo9.exec()

                elif not self.label_21.text():
                    MensCombo10 = QMessageBox()
                    MensCombo10.setIcon(QMessageBox.Warning)
                    MensCombo10.setWindowTitle("Directory and file 2 Empty")
                    MensCombo10.setText("Please, enter a valid Value")
                    returnValue = MensCombo10.exec()

                else:

                    # *** READING THE FILES 1 -3 ***

                    # Filtering with a Bandpass.
                    plt.close()                                                 # Close the existing chart.
                    archivoFil1 = (self.label_2.text())                         # Load file -1
                    archivoFil2 = (self.label_19.text())                        # Load file -2
                    archivoFil3 = (self.label_21.text())                        # Load file -3

                    # To get the file name
                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    # Reading input parameters text boxes
                    frecM = (self.lineEdit_2.text())                            # Minimum frequency label reading.
                    frecMax = (self.lineEdit_3.text())                          # Maximum frequency label reading.
                    orden1 = (self.lineEdit_4.text())                           # Filter order label reading.

                    # Reading file according to the format through the "obspy" library.
                    st  = obspy.read(archivoFil1)                               # Reading file 1.
                    st2  = obspy.read(archivoFil2)                              # Reading file 2.
                    st3  = obspy.read(archivoFil3)                              # Reading file 3.

                    # Convert the string value of the text box to float or int value
                    frec7=float(frecM)                                          # Converts the Minimum Frequency value to floating.
                    frec8=float(frecMax)                                        # Converts the value of the Maximum Frequency to floating.
                    orden2=int(orden1)                                          # Converts filter order value to integer.

                    # *** READING AND CONVERSION OF TRACES FOR THE THREE COMPONENTS ****

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 1 ****
                    NTraza = (self.lineEdit_5.text())                           # Reading the contents of the text box Trace No. st[0].
                    Ntraza2 = int(NTraza)                                       # Converts the value of the Trace Number to an integer.
                    tr = st[Ntraza2]                                            # Assigns the indicated trace number to the Stream for record processing.

                    #Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 2 ****
                    NTrazaB = (self.lineEdit_6.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2B = int(NTrazaB)                                     # Converts the value of the Trace Number to an integer.
                    tr2 = st2[Ntraza2B]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 3 ****
                    NTrazaC = (self.lineEdit_7.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2C = int(NTrazaC)                                     # Converts the value of the Trace Number to an integer.
                    tr3 = st3[Ntraza2C]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # *** CONSTRUCTION OF THE DATA FILE, SIZE, FILTER AND TIME VECTOR FOR THE THREE COMPONENTS ***

                    # *** For File -1
                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('bandpass', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t1 = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    # *** For File -2
                    tr2.stats.station
                    tr2_filt = tr2.copy()
                    s2 = len(tr2)
                    tr2_filt.filter('bandpass', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t2 = np.arange(0, tr2.stats.npts / tr2.stats.sampling_rate, tr2.stats.delta)

                    # *** For File -3
                    tr3.stats.station
                    tr3_filt = tr3.copy()
                    s3 = len(tr3)
                    tr3_filt.filter('bandpass', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t3 = np.arange(0, tr3.stats.npts / tr3.stats.sampling_rate, tr3.stats.delta)

                    # *** AHERE, THE THREE GRAPHICS OF THE THREE COMPONENTS ARE CALCULATED AND PRESENTED ****

                    # Graphics: original and filtered for File 1

                    fig, ax = plt.subplots(layout="constrained")
                    #ax = plt.subplot(321)

                    #plt.plot(t1, tr.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    #plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    #plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    #plt.grid()

                    ax = plt.subplot(311)
                    #plt.subplot(311, sharex=ax)
                    plt.plot(t1, tr_filt.data, 'b', label='01 Septiembre 2014')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    #plt.ylabel('Filtered data Bandpass 1 -15 Hz', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    plt.title(u'Colima EZV4 - 2014', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : " + root + ' - Filtered Record - Bandpass',  color ="darkgreen", fontsize=19)
                    #plt.grid()                                                   # presenta la cuadricula en el grafico

                    # Graphics: original and filtered for File 2

                    #plt.subplot(323, sharex=ax)
                    #plt.plot(t2, tr2.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    #plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    #plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    #plt.grid()

                    plt.subplot(312, sharex=ax)
                    plt.plot(t2, tr2_filt.data, 'b', label='02 Septiembre 2014')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    #plt.ylabel('Filtered data Bandpass 1 -15 Hz', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - Bandpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    #plt.grid()

                    # Graphics: original and filtered for File 3

                    #plt.subplot(325, sharex=ax)
                    #plt.plot(t3, tr3.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    #plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    #plt.grid()

                    plt.subplot(313, sharex=ax)
                    plt.plot(t3, tr3_filt.data, 'b', label='03 Septiembre 2014')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    #plt.ylabel('Filtered data Bandpass 1 -15 Hz', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - Bandpass', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    #plt.grid()

                    plt.show()

                    # *** FOR THE CALCULATION OF THE STATISTICS IN THE THREE COMPONENTS ***

                    # *** CALCULATION OF DATA FOR FILE 1 ***

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing, File 1
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)


                    # *** CALCULATION OF DATA FOR FILE 2 ***

                    # Seismic record statistics calculations
                    datos2 = tr2.data
                    # Calculate the arithmetic mean
                    Ftr2 = datos2.mean()
                    # Calculate the median
                    FMed2 = np.median(datos2)
                    # Calculate the standard deviation
                    DT2 = np.std(datos2)
                    # Calculate the variance
                    VAR2 = np.var(datos2)

                    # Record Statistics Printing, File 1
                    msg_e1B = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr2, " | The median is: ", FMed2,
                             " | The The S.D. is: ", DT2, " | The variance is: ", VAR2,
                             "| The fs  (Hz) is:", tr2.stats.sampling_rate, "| The Samples No.: ", tr2.stats.npts, "| The Format is :", tr2.stats._format)

                    # *** CALCULATION OF DATA FOR FILE 3 ***

                    # Seismic record statistics calculations
                    datos3 = tr3.data
                    # Calculate the arithmetic mean
                    Ftr3 = datos3.mean()
                    # Calculate the median
                    FMed3 = np.median(datos3)
                    # Calculate the standard deviation
                    DT3 = np.std(datos3)
                    # Calculate the variance
                    VAR3 = np.var(datos3)

                    # Record Statistics Printing, File 1
                    msg_e1C = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr3, " | The median is: ", FMed3,
                             " | The The S.D. is: ", DT3, " | The variance is: ", VAR3,
                             "| The fs  (Hz) is:", tr3.stats.sampling_rate, "| The Samples No.: ", tr3.stats.npts, "| The Format is :", tr3.stats._format)


                    # To present Metadata file and Trace file informations. File 1

                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata.
                    stream = Stream(traces=[st])                                # To present the total number of traces. File 1
                    A5 = (Stream.__str__(st, extended=True))                    # Variable that contains the total number of traces in the record.
                    mg3 = "%s" %(A5)                                            # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 2

                    msg_e2B = "%s" % (tr2.stats)                                # To present the metadata
                    stream = Stream(traces=[st2])                               # To present the total number of traces. File 2
                    A5B = (Stream.__str__(st2, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3B = "%s" %(A5B)                                          # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 3

                    msg_e2C = "%s" % (tr3.stats)                                # To present the metadata
                    stream = Stream(traces=[st3])                               # To present the total number of traces. File 3
                    A5C = (Stream.__str__(st3, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3C = "%s" %(A5C)                                          # Convert trace data to string or text.


                    # Text format for the three files: 1, 2, 3
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Printing using text format. Files: 1, 2, 3
                    self.label_9.setText('1.-'+ msg_e1 + '\n' + '2.-' + msg_e1B + '\n' + '3.-' + msg_e1C)      # Printing on the label of the Record statistics. Files: 1, 2, 3

                    self.textEdit.setText('File 1: '+ msg_e2 + "\n\n" + 'File 2: ' + msg_e2B + "\n\n" + 'File 3: ' + msg_e2C)       # Place the Metadata information in text box 1. Files: 1, 2, 3
                    self.textEdit_2.setText('File 1: '+ mg3 + "\n\n" + 'File 2: ' + mg3B + "\n\n" + 'File 3: ' + mg3C)              # Place the information on the Number of Traces in text box 2. Files: 1, 2, 3

        except:
                plt.close()                                                     # Close the existing chart.
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Warning)
                msgBox.setText("The File Does not exist, is Invalid or the Format is not recognized. Please, try again ...")
                msgBox.setWindowTitle("Invalid Record File")
                returnValue = msgBox.exec()
                pass


    def filtrobandstop(self):                                               # 3.- Function to execute the Bandstop filter

        try:

            # Function to execute the Bandstop filter for one component.

            if self.radioButton.isChecked() == True:

                # Verify that the Frequency text box is not empty
                if not self.lineEdit_2.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency Min.")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_3.text():
                    MensCombo2 = QMessageBox()
                    MensCombo2.setIcon(QMessageBox.Warning)
                    MensCombo2.setWindowTitle("Empty Frequency Max.")
                    MensCombo2.setText("Please, enter a valid Value")
                    returnValue = MensCombo2.exec()

                elif not self.lineEdit_4.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Empty Filter Order")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.lineEdit_5.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                elif not self.label_2.text():
                    MensCombo5 = QMessageBox()
                    MensCombo5.setIcon(QMessageBox.Warning)
                    MensCombo5.setWindowTitle("Directory and file 1 Empty")
                    MensCombo5.setText("Please, enter a valid Value")
                    returnValue = MensCombo5.exec()

                else:
                    # Filtering with a Bandstop.
                    plt.close()                                                 # Close the existing chart.
                    archivoFil1 = (self.label_2.text())                         # Lectura etiqueta del Record (Load file -1)

                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    frecM = (self.lineEdit_2.text())                            # Lectura etiqueta de Frec. Min.
                    frecMax = (self.lineEdit_3.text())                          # Lectura etiqueta de Frec. Max.
                    orden1 = (self.lineEdit_4.text())                           # Lectura del orden del Filter

                    st  = obspy.read(archivoFil1)                               # Lectura archivo de acuerdo al formato

                    # Convertir a flotante el valor string de la caja de texto
                    frec7=float(frecM)                                          # Convierte a flotante el valor de la Frec. Min.
                    frec8=float(frecMax)                                        # Convierte a flotante el valor de la Frec. Max.
                    orden2=int(orden1)                                          # Convierte el valor del orden del filtro a entero

                    # Ingresar y convertir a entero el valor string de la caja de texto Nº Trazas st[0]
                    NTraza = (self.lineEdit_5.text())                           # Lectura del contenido de la caja de texto Nº Traza st[0]
                    Ntraza2 = int(NTraza)                                       # Convierte el valor del Nº de Traza a entero
                    tr = st[Ntraza2]                                            # Asigna el número de traza indicado al Stream para tratamiento del registro

                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('bandstop', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    ax = plt.subplot(211)

                    plt.plot(t, tr.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()
                    plt.subplot(212, sharex=ax)
                    plt.plot(t, tr_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Bandstop', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - Bandstop', color ="darkgreen", fontsize=19)  # Ponemos un título
                    plt.suptitle("Record : " + root + ' - Filtered Record - Bandstop', color ="darkgreen", fontsize=19)
                    plt.grid()                                                   # presenta la cuadricula en el grafico
                    plt.show()

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)


                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata

                    stream = Stream(traces=[st])                                # Para presentar el numero de trazas total
                    A5 = (Stream.__str__(st, extended=True))                    # Variable que contiene el numero total de trazas del registro
                    mg3 = "%s" %(A5)                                            # convertir a string o texto los datos de las trazas

                    # Formato de Texto
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Impresion mediante el formato de texto
                    self.label_9.setText(msg_e1)                                # Impresión en la eiqueta de la estadistica del Record

                    self.textEdit.setText(msg_e2)                               # Coloca la información de Metadatos en el cuadro de texto 1
                    self.textEdit_2.setText(mg3)                                # Coloca la información del Nº de Trazas en el cuadro de texto 2

            else:

                # Function to use the Bandstop filter with the three components.

                # Verify that the text boxes and labels not empty.
                if not self.lineEdit_2.text():
                    MensCombo1 = QMessageBox()
                    MensCombo1.setIcon(QMessageBox.Warning)
                    MensCombo1.setWindowTitle("Empty Frequency Min.")
                    MensCombo1.setText("Please, enter a valid Value")
                    returnValue = MensCombo1.exec()

                elif not self.lineEdit_3.text():
                    MensCombo2 = QMessageBox()
                    MensCombo2.setIcon(QMessageBox.Warning)
                    MensCombo2.setWindowTitle("Empty Frequency Max.")
                    MensCombo2.setText("Please, enter a valid Value")
                    returnValue = MensCombo2.exec()

                elif not self.lineEdit_4.text():
                    MensCombo3 = QMessageBox()
                    MensCombo3.setIcon(QMessageBox.Warning)
                    MensCombo3.setWindowTitle("Empty Filter Order")
                    MensCombo3.setText("Please, enter a valid Value")
                    returnValue = MensCombo3.exec()

                elif not self.lineEdit_5.text():
                    MensCombo4 = QMessageBox()
                    MensCombo4.setIcon(QMessageBox.Warning)
                    MensCombo4.setWindowTitle("Trace No. File - 1 Empty")
                    MensCombo4.setText("Please, enter a valid Value")
                    returnValue = MensCombo4.exec()

                elif not self.lineEdit_6.text():
                    MensCombo6 = QMessageBox()
                    MensCombo6.setIcon(QMessageBox.Warning)
                    MensCombo6.setWindowTitle("Trace No. File - 2 Empty")
                    MensCombo6.setText("Please, enter a valid Value")
                    returnValue = MensCombo6.exec()

                elif not self.lineEdit_7.text():
                    MensCombo7 = QMessageBox()
                    MensCombo7.setIcon(QMessageBox.Warning)
                    MensCombo7.setWindowTitle("Trace No. File - 3 Empty")
                    MensCombo7.setText("Please, enter a valid Value")
                    returnValue = MensCombo7.exec()

                elif not self.label_2.text():
                    MensCombo8 = QMessageBox()
                    MensCombo8.setIcon(QMessageBox.Warning)
                    MensCombo8.setWindowTitle("Directory and file 1 Empty")
                    MensCombo8.setText("Please, enter a valid Value")
                    returnValue = MensCombo8.exec()

                elif not self.label_19.text():
                    MensCombo9 = QMessageBox()
                    MensCombo9.setIcon(QMessageBox.Warning)
                    MensCombo9.setWindowTitle("Directory and file 2 Empty")
                    MensCombo9.setText("Please, enter a valid Value")
                    returnValue = MensCombo9.exec()

                elif not self.label_21.text():
                    MensCombo10 = QMessageBox()
                    MensCombo10.setIcon(QMessageBox.Warning)
                    MensCombo10.setWindowTitle("Directory and file 2 Empty")
                    MensCombo10.setText("Please, enter a valid Value")
                    returnValue = MensCombo10.exec()

                else:

                    # *** READING THE FILES 1 -3 ***

                    # Filtering with a Bandstop.
                    plt.close()                                                 # Close the existing chart.
                    archivoFil1 = (self.label_2.text())                         # Load file -1
                    archivoFil2 = (self.label_19.text())                        # Load file -2
                    archivoFil3 = (self.label_21.text())                        # Load file -3

                    # To get the file name
                    head, tail = os.path.split(self.archivo_abierto)
                    root, extension = os.path.splitext(self.archivo_abierto)
                    root, extension = os.path.splitext(tail)

                    # Reading input parameters text boxes
                    frecM = (self.lineEdit_2.text())                            # Minimum frequency label reading.
                    frecMax = (self.lineEdit_3.text())                          # Maximum frequency label reading.
                    orden1 = (self.lineEdit_4.text())                           # Filter order label reading.

                    # Reading file according to the format through the "obspy" library.
                    st  = obspy.read(archivoFil1)                               # Reading file 1.
                    st2  = obspy.read(archivoFil2)                              # Reading file 2.
                    st3  = obspy.read(archivoFil3)                              # Reading file 3.

                    # Convert the string value of the text box to float or int value
                    frec7=float(frecM)                                          # Converts the Minimum Frequency value to floating.
                    frec8=float(frecMax)                                        # Converts the value of the Maximum Frequency to floating.
                    orden2=int(orden1)                                          # Converts filter order value to integer.

                    # *** READING AND CONVERSION OF TRACES FOR THE THREE COMPONENTS ****

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 1 ****
                    NTraza = (self.lineEdit_5.text())                           # Reading the contents of the text box Trace No. st[0].
                    Ntraza2 = int(NTraza)                                       # Converts the value of the Trace Number to an integer.
                    tr = st[Ntraza2]                                            # Assigns the indicated trace number to the Stream for record processing.

                    #Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 2 ****
                    NTrazaB = (self.lineEdit_6.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2B = int(NTrazaB)                                     # Converts the value of the Trace Number to an integer.
                    tr2 = st2[Ntraza2B]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # Enter and convert the string value of the text box No. Traces st[0] to an integer - FOR FILE 3 ****
                    NTrazaC = (self.lineEdit_7.text())                          # Reading the contents of the text box Trace No. st[0].
                    Ntraza2C = int(NTrazaC)                                     # Converts the value of the Trace Number to an integer.
                    tr3 = st3[Ntraza2C]                                         # Assigns the indicated trace number to the Stream for record processing.

                    # *** CONSTRUCTION OF THE DATA FILE, SIZE, FILTER AND TIME VECTOR FOR THE THREE COMPONENTS ***

                    # *** For File -1
                    tr.stats.station
                    tr_filt = tr.copy()
                    s = len(tr)
                    tr_filt.filter('bandstop', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t1 = np.arange(0, tr.stats.npts / tr.stats.sampling_rate, tr.stats.delta)

                    # *** For File -2
                    tr2.stats.station
                    tr2_filt = tr2.copy()
                    s2 = len(tr2)
                    tr2_filt.filter('bandstop', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t2 = np.arange(0, tr2.stats.npts / tr2.stats.sampling_rate, tr2.stats.delta)

                    # *** For File -3
                    tr3.stats.station
                    tr3_filt = tr3.copy()
                    s3 = len(tr3)
                    tr3_filt.filter('bandstop', freqmin=frec7, freqmax=frec8, corners=orden2, zerophase=True)
                    # Donde corners = orden del filtro, de orden 2
                    t3 = np.arange(0, tr3.stats.npts / tr3.stats.sampling_rate, tr3.stats.delta)


                    # *** AHERE, THE THREE GRAPHICS OF THE THREE COMPONENTS ARE CALCULATED AND PRESENTED ****

                    # Graphics: original and filtered for File 1

                    fig, ax = plt.subplots(layout="constrained")
                    ax = plt.subplot(321)

                    plt.plot(t1, tr.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(322, sharex=ax)
                    plt.plot(t1, tr_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Bandstop', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - bandstop', color ="darkgreen", fontsize=19)  # Ponemos un título
                    plt.suptitle("Record : " + root + ' - Filtered Record - Bandstop',  color ="darkgreen", fontsize=19)
                    plt.grid()                                                   # presenta la cuadricula en el grafico

                    # Graphics: original and filtered for File 2

                    plt.subplot(323, sharex=ax)
                    plt.plot(t2, tr2.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda

                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(324, sharex=ax)
                    plt.plot(t2, tr2_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Bandstop', color ="blue", fontsize=14)
                    #plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - bandstop', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    plt.grid()

                    # Graphics: original and filtered for File 3

                    plt.subplot(325, sharex=ax)
                    plt.plot(t3, tr3.data, 'k', label='Original Record')          # Donde 'k' es el color = black
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    plt.ylabel('Record - Amplitude', color ="blue", fontsize=14)
                    plt.grid()

                    plt.subplot(326, sharex=ax)
                    plt.plot(t3, tr3_filt.data, 'b', label='Filtered Record')     # b = color, azul
                    plt.legend(prop = {'size': 10}, loc='upper right')          # Para colocar la leyenda a la izquierda
                    # color para plor: k=black, r=red, b=blue,
                    # lineas-> : = estilo de línea punteada, -- = estilo de línea discontinua
                    plt.ylabel('Filtered data Bandstop', color ="blue", fontsize=14)
                    plt.xlabel('Time [s]', color ="red", fontsize=20)
                    #plt.title(u'Filtered Record - Bandstop', color ="darkgreen", fontsize=19)  # Ponemos un título
                    #plt.suptitle("Record : %s " % tr.stats.starttime, color ="red", fontsize=19)
                    plt.grid()

                    plt.show()


                    # *** FOR THE CALCULATION OF THE STATISTICS IN THE THREE COMPONENTS ***

                    # *** CALCULATION OF DATA FOR FILE 1 ***

                    # Seismic record statistics calculations
                    datos = tr.data
                    # Calculate the arithmetic mean
                    Ftr = datos.mean()
                    # Calculate the median
                    FMed = np.median(datos)
                    # Calculate the standard deviation
                    DT = np.std(datos)
                    # Calculate the variance
                    VAR = np.var(datos)

                    # Record Statistics Printing, File 1
                    msg_e1 = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr, " | The median is: ", FMed,
                             " | The The S.D. is: ", DT, " | The variance is: ", VAR,
                             "| The fs  (Hz) is:", tr.stats.sampling_rate, "| The Samples No.: ", tr.stats.npts, "| The Format is :", tr.stats._format)


                    # *** CALCULATION OF DATA FOR FILE 2 ***

                    # Seismic record statistics calculations
                    datos2 = tr2.data
                    # Calculate the arithmetic mean
                    Ftr2 = datos2.mean()
                    # Calculate the median
                    FMed2 = np.median(datos2)
                    # Calculate the standard deviation
                    DT2 = np.std(datos2)
                    # Calculate the variance
                    VAR2 = np.var(datos2)

                    # Record Statistics Printing, File 1
                    msg_e1B = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr2, " | The median is: ", FMed2,
                             " | The The S.D. is: ", DT2, " | The variance is: ", VAR2,
                             "| The fs  (Hz) is:", tr2.stats.sampling_rate, "| The Samples No.: ", tr2.stats.npts, "| The Format is :", tr2.stats._format)

                    # *** CALCULATION OF DATA FOR FILE 3 ***

                    # Seismic record statistics calculations
                    datos3 = tr3.data
                    # Calculate the arithmetic mean
                    Ftr3 = datos3.mean()
                    # Calculate the median
                    FMed3 = np.median(datos3)
                    # Calculate the standard deviation
                    DT3 = np.std(datos3)
                    # Calculate the variance
                    VAR3 = np.var(datos3)

                    # Record Statistics Printing, File 1
                    msg_e1C = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s" % (" The arithmetic mean is: ", Ftr3, " | The median is: ", FMed3,
                             " | The The S.D. is: ", DT3, " | The variance is: ", VAR3,
                             "| The fs  (Hz) is:", tr3.stats.sampling_rate, "| The Samples No.: ", tr3.stats.npts, "| The Format is :", tr3.stats._format)


                    # To present Metadata file and Trace file informations. File 1

                    msg_e2 = "%s" % (tr.stats)                                  # To present the metadata.
                    stream = Stream(traces=[st])                                # To present the total number of traces. File 1
                    A5 = (Stream.__str__(st, extended=True))                    # Variable that contains the total number of traces in the record.
                    mg3 = "%s" %(A5)                                            # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 2

                    msg_e2B = "%s" % (tr2.stats)                                # To present the metadata
                    stream = Stream(traces=[st2])                               # To present the total number of traces. File 2
                    A5B = (Stream.__str__(st2, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3B = "%s" %(A5B)                                          # Convert trace data to string or text.

                    # To present Metadata file and Trace file informations. File 3

                    msg_e2C = "%s" % (tr3.stats)                                # To present the metadata
                    stream = Stream(traces=[st3])                               # To present the total number of traces. File 3
                    A5C = (Stream.__str__(st3, extended=True))                  # Variable that contains the total number of traces in the record.
                    mg3C = "%s" %(A5C)                                          # Convert trace data to string or text.

                    # Text format for the three files: 1, 2, 3
                    font=QtGui.QFont()
                    font.setFamily("Times New Roman")
                    font.setPointSize(8)
                    font.setBold(False)
                    font.setItalic(False)
                    font.setWeight(60)

                    self.label_9.setFont(font)                                  # Printing using text format. Files: 1, 2, 3
                    self.label_9.setText('1.-'+ msg_e1 + '\n' + '2.-' + msg_e1B + '\n' + '3.-' + msg_e1C)      # Printing on the label of the Record statistics. Files: 1, 2, 3

                    self.textEdit.setText('File 1: '+ msg_e2 + "\n\n" + 'File 2: ' + msg_e2B + "\n\n" + 'File 3: ' + msg_e2C)       # Place the Metadata information in text box 1. Files: 1, 2, 3
                    self.textEdit_2.setText('File 1: '+ mg3 + "\n\n" + 'File 2: ' + mg3B + "\n\n" + 'File 3: ' + mg3C)              # Place the information on the Number of Traces in text box 2. Files: 1, 2, 3

        except:
                plt.close()                                                 # Close the existing chart.
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Warning)
                msgBox.setText("The File Does not exist, is Invalid or the Format is not recognized. Please, try again ...")
                msgBox.setWindowTitle("Invalid Record File")
                returnValue = msgBox.exec()
                pass


    """ Function to go back at home """

    def Back1(self):                                                        # Call function to Menu Module (Back)
        if sistema == "Windows":                                            # If the system is Windows
            plt.close()                                                     # Close the existing chart.
            subprocess.Popen(["python", "Menu1.py"])
            app.quit()
            #print("We are in {}".format(sistema))
        else:                                                               # If the system is Linux
            plt.close()                                                     # Close the existing chart
            subprocess.Popen(["python3", "Menu1.py"])
            app.quit()

    """  Fuction to exit system  """

    def Exit1(self):                                # Call function to show exit dialog box
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Question)
        msg.setWindowTitle("Exit Read Records")
        msg.setText("Are you sure to exit the Read Records module?")
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        msg.setDefaultButton(QMessageBox.Ok)                            # By default, the focus is on the OK button
        returnValue = msg.exec()
        if returnValue == QMessageBox.Ok:                               # If the answer is OK
            app.closeAllWindows()                                       # Close all windows.
            app.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    # Developed by: Ligdamis A. Gutiérrez E. PhD.
